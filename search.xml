<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IBM Watson Studio云机器学习平台</title>
    <url>/2021/02/22/IBM%20Watson%20Studio%E4%BA%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h1 id="IBM-Watson-Studio云机器学习平台"><a href="#IBM-Watson-Studio云机器学习平台" class="headerlink" title="IBM Watson Studio云机器学习平台"></a>IBM Watson Studio云机器学习平台</h1><p><a href="https://cloud.ibm.com/catalog/services/watson-studio?cm_mmc=Email_Newsletter-_-Developer_Ed%2BTech-_-WW_WW-_-SkillsNetwork-Courses-IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork-20718538-www-coursera-org-www-coursera-org&amp;cm_mmca1=000026UJ&amp;cm_mmca2=10006555&amp;cm_mmca3=M12345678&amp;cvosrc=email.Newsletter.M12345678&amp;cvo_campaign=000026U" target="_blank" rel="noopener">IBM Watson Studio</a>是IBM Cloud云服务中的一个核心平台，集成了很多人工智能工具，可以连接数据库进行云存储，创建Dashboard仪表盘，在线训练你的机器学习模型，支持Jupyter Notebook编写代码及分享，支持RStudio、SPSS Modeler等等。并且，其内置了很多已经构建好的机器学习模型，如自然语言文本分类、图像识别、深度学习模型、最优化决策。看起来就很有吸引力！</p>
<img src="/2021/02/22/IBM%20Watson%20Studio%E4%BA%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/02/22/IBM%20Watson%20Studio%E4%BA%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/%E6%9C%8D%E5%8A%A1.PNG" class title="[服务]">

<img src="/2021/02/22/IBM%20Watson%20Studio%E4%BA%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/02/22/IBM%20Watson%20Studio%E4%BA%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B9%B3%E5%8F%B0/home_page.png" class title="[home_page]">

<p>在此分享Coursera上关于简易上手使用IBM Watson Studio的<a href="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/FinalModule_Coursera/IBM_Watson_Setup.md.html?origin=www.coursera.org" target="_blank" rel="noopener">教程</a>，开始写你在Watson Studio上的第一段Jupyter Notebook代码吧。</p>
<p>同时分享两则<strong>注意事项</strong>：</p>
<ol>
<li><p>注册账户的时候建议使用<strong>Gmail</strong>，不然很可能会注册失败。</p>
</li>
<li><p>Github同步要在repository里新建<strong>master</strong>分支，不要仅有默认的<strong>main</strong>分支，不然Notebook的同步会报错。</p>
</li>
</ol>
<p>IBM Cloud属实功能强大，日后有机会再进一步研究使用。</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>IBM Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>PLSQL导入excel数据方法以及txt编码转换</title>
    <url>/2020/11/27/PLSQL%E5%AF%BC%E5%85%A5excel%E6%95%B0%E6%8D%AE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><p>把excel另存为用制表符分隔的txt文件，并确保打开编码正确，中文可以正确显示。</p>
</li>
<li><p>然后用<strong>文本导入器</strong>，不选<strong>ODBC导入器</strong>，导入<strong>已经创建好的有对应字段的空表中</strong>。</p>
</li>
<li><p>推荐<strong>Emeditor</strong>打开超大txt文件，并且实现编码转换。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>arcgis中XYtoLine失败的原因及解决方案</title>
    <url>/2022/01/02/arcgis%E4%B8%ADXYtoLine%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="arcgis中XYtoLine失败的原因及解决方案"><a href="#arcgis中XYtoLine失败的原因及解决方案" class="headerlink" title="arcgis中XYtoLine失败的原因及解决方案"></a>arcgis中XYtoLine失败的原因及解决方案</h1><ol>
<li>包含<strong>XY数据</strong>的<strong>csv</strong>文件需先导出为<strong>dbf</strong>格式</li>
<li>而后再将这个<strong>dbf</strong>数据导入arcgis</li>
<li>运行<strong>XYtoLine</strong>工具</li>
</ol>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>arcgis</tag>
      </tags>
  </entry>
  <entry>
    <title>plotly基础画图使用尝试</title>
    <url>/2022/02/27/plotly%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE%E4%BD%BF%E7%94%A8%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<script src="http://code.jquery.com/jquery-2.0.0.js"></script>

<iframe width="100%" id="iframeid" scrolling="yes" height="1800" frameborder="0" src="https://nbviewer.org/github/EvaRen1020-pro/myblog_ipynb_codes/blob/main/plotly%E5%9F%BA%E7%A1%80%E7%94%BB%E5%9B%BE%E4%BD%BF%E7%94%A8%E5%B0%9D%E8%AF%95.ipynb"></iframe>

]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>plotly</tag>
        <tag>jupyterlab</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>【Windows+Cygwin+Darknet+OpenCV】简易上手实现YOLOv3目标检测</title>
    <url>/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<p><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">YOLO(You only look once)</a>是github上很火的一个目标检测算法。它的官网提供了很方便的用C语言编写的程序<strong>Darknet</strong>。
但是官网提供的很方便的编译方法是基于Linux和Mac系统的。我这次来讲讲我是如何在自己windows系统下配置<strong>Darknet</strong>模块的。
<strong>注：我这次是下了Cygwin来模拟Linux系统，因为不想下体积占据几个G的Visual Studio来进行编译，Cygwin安装包本身只有1.3M大小。
如果有Visual Studio，可以参照<a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">AlexeyAB版本</a>进行配置。</strong></p>
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/YOLO%E5%AE%98%E7%BD%91.png" class title="[官网图]">

<h2 id="基础配置流程"><a href="#基础配置流程" class="headerlink" title="基础配置流程"></a>基础配置流程</h2><p>配置过程参照官网：<a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a></p>
<p>(1) 将github上的<a href="https://github.com/pjreddie/darknet" target="_blank" rel="noopener">https://github.com/pjreddie/darknet</a> 整个项目下载到本地电脑。
    注：此处建议使用下载.zip压缩包的方式，不是直接用git clone到本地文件夹，不然可能后面会遇到couldn’t open file: data/coco.names的问题。
(2) 切换到darknet文件夹，使用make命令编译C语言源文件。
此时，Windows系统下在cmd命令行会报错无法使用make命令。因为make是linux系统下编译源文件使用的命令。官网也有注明这些命令只在Linux和Mac系统上测试过，未在windows系统下测试。
所以，下载Cygwin软件实现在windows平台模拟linux系统操作命令，而后可以使用make命令编译源码，生成darknet.exe可执行文件。安装配置Cygwin 参照这篇博客以及其下面的问答：<a href="https://blog.csdn.net/chunleixiahe/article/details/55666792" target="_blank" rel="noopener">https://blog.csdn.net/chunleixiahe/article/details/55666792</a></p>
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9C%A8Cygwin%E7%BC%96%E8%AF%91%E6%88%90%E5%8A%9F.png" class title="[在Cygwin编译成功]">
<p>(3)    下载别人已训练好的yolov3.weights模型权重文件，放于darknet根目录下。
官网链接（下载较慢）：<a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a>
百度云链接：<a href="https://pan.baidu.com/s/1CVgvP4hQQvDNbKmXhmkxqw" target="_blank" rel="noopener">https://pan.baidu.com/s/1CVgvP4hQQvDNbKmXhmkxqw</a> 提取码：jnhn 
(4) 使用命令./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg完成测试。因为没有配置OpenCV，图片结果不会直接显示的屏幕上，而是存于默认文件夹的根目录predictions.jpg。
但是此时默认的程序不会将置信度显示在图片上，只打印于命令行,图片会存于根目录下<code>predictions.jpg</code>。</p>
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%AE%98%E6%96%B9%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87%E7%BB%93%E6%9E%9C%E4%B8%8D%E5%90%AB%E7%BD%AE%E4%BF%A1%E5%BA%A6.jpg" class title="[官方测试图片结果不含置信度]">
<p>(5) 为实现将预测的置信度显示于检测结果图片上，更改默认darknet文件夹下的<code>src/image.c</code>文件<code>draw_detections</code>函数。
参照：<a href="https://blog.csdn.net/qq_34795071/article/details/86665620" target="_blank" rel="noopener">https://blog.csdn.net/qq_34795071/article/details/86665620</a></p>
<pre class="line-numbers language-python"><code class="language-python">int i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    char labelstr<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    int <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
char possible<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">//</span>存放检测的置信值
    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> classes<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
  sprintf<span class="token punctuation">(</span>possible<span class="token punctuation">,</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span>dets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>prob<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>置信值截取小数点后两位赋给possible
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>prob<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> thresh<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                strcat<span class="token punctuation">(</span>labelstr<span class="token punctuation">,</span> names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        strcat<span class="token punctuation">(</span>labelstr<span class="token punctuation">,</span> possible<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>标签中加入置信值
                <span class="token keyword">class</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                strcat<span class="token punctuation">(</span>labelstr<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                strcat<span class="token punctuation">(</span>labelstr<span class="token punctuation">,</span> names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        strcat<span class="token punctuation">(</span>labelstr<span class="token punctuation">,</span> possible<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>标签中加入置信值
            <span class="token punctuation">}</span>
            printf<span class="token punctuation">(</span><span class="token string">"%s: %.0f%%\n"</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>prob<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>(6) 删除掉原编译好的darknet.exe, libdarknet.a, libdarknet.so,重新使用make编译源文件，再执行上述检测语句，即可存储含有置信度的图片。</p>
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/dog_predictions.jpg" class title="[dog_predictions]">
<p>(7) 若想更改检测的默认置信度，在检测命令后添加 -thresh &lt;数值&gt;。
<code>./darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg -thresh 0.4</code></p>
<p><strong>至此已经完成了最基础的Darknet配置来实现YOLOv3算法。</strong></p>
<h2 id="OpenCV拓展实现实时目标检测"><a href="#OpenCV拓展实现实时目标检测" class="headerlink" title="OpenCV拓展实现实时目标检测"></a>OpenCV拓展实现实时目标检测</h2><p>(1)    安装<code>OpenCV</code>，拓展可支持的图片类型，并且将结果自动弹窗显示：
<code>OpenCV(Windows版本的即可)</code>安装完毕后，需要再次使用<code>Cygwin</code>下载<code>Linux</code>支持的<code>OpenCV</code>相应文件，并将<code>darknet</code>根目录下<code>Makefile</code>用文本打开，开头部分设为OPENCV=1,才可成功编译可支持<code>OpenCV</code>的<code>darknet.exe</code>。
编译完基于<code>OpenCV</code>的可执行程序后，不能如原来一样在命令行直接输入检测语句，不然会出现无法展示的报错，配置并启动<code>Xterm</code>才可以解决。</p>
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/opencv%E9%85%8D%E7%BD%AE%E5%90%8E%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%B9%E6%A1%86%E6%8A%A5%E9%94%99.png" class title="[opencv配置后在命令行弹框报错]">
<p>在<code>Cygwin</code>输入<code>export DISPLAY=:0.0</code>和<code>startxwin &</code>即可启动<code>Xterm</code>，然后输入相应命令，即可出现弹框，如下所示。</p>
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E5%9C%A8Xterm%E6%88%90%E5%8A%9F%E6%98%BE%E7%A4%BA%E8%87%B3%E7%AA%97%E5%8F%A3%E5%B1%8F%E5%B9%95.png" class title="[在Xterm成功显示至窗口屏幕]">
<p><strong>Xterm使用两则小贴士：</strong>（1）鼠标中键实现“粘贴”；（2）ctrl+右键可以改字号。
(2) 参照这篇博客<a href="https://blog.csdn.net/weixin_43590290/article/details/100736307?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2
">【python+OpenCV+YOLOv3打开笔记本摄像头模型检测】</a>的代码，使用python程序，通过OpenCV调用摄像头实现实时检测。
这篇文章调用的是电脑自带摄像头，我通过给安卓手机下载<strong>IP Webcam</strong>软件，实现调用手机摄像头的实时目标检测。
具体代码如下：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> os

<span class="token keyword">def</span> <span class="token function">video_demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 加载已经训练好的模型路径，可以是绝对路径或者相对路径</span>
    weightsPath <span class="token operator">=</span> <span class="token string">"../yolov3.weights"</span>
    configPath <span class="token operator">=</span> <span class="token string">"../cfg/yolov3.cfg"</span>
    labelsPath <span class="token operator">=</span> <span class="token string">"../data/coco.names"</span>
    <span class="token comment" spellcheck="true"># 初始化一些参数</span>
    LABELS <span class="token operator">=</span> open<span class="token punctuation">(</span>labelsPath<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 物体类别</span>
    COLORS <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>LABELS<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"uint8"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 颜色</span>
    boxes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    confidences <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    classIDs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    net <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dnn<span class="token punctuation">.</span>readNetFromDarknet<span class="token punctuation">(</span>configPath<span class="token punctuation">,</span> weightsPath<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 读入待检测的图像</span>
    <span class="token comment" spellcheck="true"># 0是代表摄像头编号，只有一个的话默认为0</span>

    url <span class="token operator">=</span> <span class="token string">'http://192.168.0.103:8080/video'</span><span class="token comment" spellcheck="true">##手机ip cam地址</span>
    <span class="token comment" spellcheck="true"># url='D:\darknet-master\\airplane.avi'#本地视频</span>
    capture <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        ref<span class="token punctuation">,</span> image <span class="token operator">=</span> capture<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">(</span>H<span class="token punctuation">,</span> W<span class="token punctuation">)</span> <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
        <span class="token comment" spellcheck="true"># 得到 YOLO需要的输出层</span>
        ln <span class="token operator">=</span> net<span class="token punctuation">.</span>getLayerNames<span class="token punctuation">(</span><span class="token punctuation">)</span>
        ln <span class="token operator">=</span> <span class="token punctuation">[</span>ln<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> net<span class="token punctuation">.</span>getUnconnectedOutLayers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token comment" spellcheck="true"># 从输入图像构造一个blob，然后通过加载的模型，给我们提供边界框和相关概率</span>
        blob <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dnn<span class="token punctuation">.</span>blobFromImage<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">255.0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">416</span><span class="token punctuation">,</span> <span class="token number">416</span><span class="token punctuation">)</span><span class="token punctuation">,</span> swapRB<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> crop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        net<span class="token punctuation">.</span>setInput<span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
        layerOutputs <span class="token operator">=</span> net<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>ln<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 在每层输出上循环</span>
        <span class="token keyword">for</span> output <span class="token keyword">in</span> layerOutputs<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># 对每个检测进行循环</span>
            <span class="token keyword">for</span> detection <span class="token keyword">in</span> output<span class="token punctuation">:</span>
                scores <span class="token operator">=</span> detection<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
                classID <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>scores<span class="token punctuation">)</span>
                confidence <span class="token operator">=</span> scores<span class="token punctuation">[</span>classID<span class="token punctuation">]</span>
                <span class="token comment" spellcheck="true"># 过滤掉那些置信度较小的检测结果</span>
                <span class="token keyword">if</span> confidence <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">:</span>
                    <span class="token comment" spellcheck="true"># 框后接框的宽度和高度</span>
                    box <span class="token operator">=</span> detection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>W<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W<span class="token punctuation">,</span> H<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token punctuation">(</span>centerX<span class="token punctuation">,</span> centerY<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token operator">=</span> box<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span>
                    <span class="token comment" spellcheck="true"># 边框的左上角</span>
                    x <span class="token operator">=</span> int<span class="token punctuation">(</span>centerX <span class="token operator">-</span> <span class="token punctuation">(</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    y <span class="token operator">=</span> int<span class="token punctuation">(</span>centerY <span class="token operator">-</span> <span class="token punctuation">(</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token comment" spellcheck="true"># 更新检测出来的框</span>
                    boxes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> int<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    confidences<span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>confidence<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    classIDs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>classID<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 极大值抑制</span>
        idxs <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dnn<span class="token punctuation">.</span>NMSBoxes<span class="token punctuation">(</span>boxes<span class="token punctuation">,</span> confidences<span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>idxs<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> idxs<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true"># 在原图上绘制边框和类别</span>
                color <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> COLORS<span class="token punctuation">[</span>classIDs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
                cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> w<span class="token punctuation">,</span> y <span class="token operator">+</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
                text <span class="token operator">=</span> <span class="token string">"{}: {:.4f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>LABELS<span class="token punctuation">[</span>classIDs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> confidences<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>image<span class="token punctuation">,</span> text<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Video"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 等待1ms显示图像</span>
        c <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> c <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">==</span> ord<span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 键盘输入英文字母q键退出视频</span>
            <span class="token keyword">break</span>

cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 销毁所有窗口</span>
video_demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面放一下我实时检测的画面：</p>
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E6%8E%A5%E5%85%A5%E6%89%8B%E6%9C%BA%E6%91%84%E5%83%8F%E5%A4%B4%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B.jpg" class title="[接入手机摄像头实时检测]">
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E7%94%B5%E8%84%91%E5%AE%9E%E6%97%B6%E6%A3%80%E6%B5%8B%E7%A4%BA%E6%84%8F%E7%94%BB%E9%9D%A2.jpg" class title="[电脑实时检测示意画面]">

<h2 id="配置Darknet走过的一些弯路"><a href="#配置Darknet走过的一些弯路" class="headerlink" title="配置Darknet走过的一些弯路"></a>配置Darknet走过的一些弯路</h2><p>(1)    下载CUDA实现GPU运算：
需要自己的显卡比较好，同时配置CUDA、CUDNN均需匹配版本号正确，这两个软件体积也特别大。配置这个很麻烦，Darknet官网也说明了这个安装很麻烦，所以不是长久专门使用，不必配置了。
但是没有GPU真的处理视频很卡。。。
(2)    一开始的make编译Makefile失败，尝试使用windows系统下的Visual Studio中的nmake等方式失败，尝试用MinGW也失败，最终使用Cygwin模拟linux成功。
(3) 基于已有的程序，安装完OpenCV后在模拟Linux系统下的视频流的目标侦测目前还是遇到一些问题，无法正常按帧检测，并实时在屏幕上显示检测结果。花费了2天时间进行尝试，还是没有解决这个bug，暂时放弃。有解决的朋友可以告诉我一下。
报错：
<code>(darknet:3866):GLib-GObject-CRITICAL **: g_object_set: assertion 'G_IS_OBJECT (object)' failed</code></p>
<img src="/2020/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/04/12/%E3%80%90Windows+Cygwin+Darknet+OpenCV%E3%80%91%E7%AE%80%E6%98%93%E4%B8%8A%E6%89%8B%E5%AE%9E%E7%8E%B0YOLOv3%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/%E8%A7%86%E9%A2%91%E6%8A%A5%E9%94%99.png" class title="[视频报错]">
<p>所以才最后转投了python程序去调用OpenCV做视频检测，如果你只想做图片检测，按照我上面的做法没问题。
(4) 所以当我看到最后的别人的博客调用python程序，去查<code>src</code>的源码实现<code>YOLOv3</code>，不需要配置keras和tensorflow，其实以后自己也可以这样做。自己当初放弃<a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">AlexeyAB版本</a>的python接口是因为它还是需要导入windows编译过后的<code>dll</code>模块，所以放弃。不过，有兴趣的朋友还是可以一试。</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>YOLO</tag>
        <tag>图像识别</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>【jupyterlab+pyecharts】自定义底图的地理信息可视化</title>
    <url>/2021/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<p>pyecharts包官方指南：<a href="https://pyecharts.org/#/zh-cn/intro" target="_blank" rel="noopener">https://pyecharts.org/#/zh-cn/intro</a></p>
<p><a href="https://github.com/ecomfe/echarts" target="_blank" rel="noopener">Echarts</a> 是一个由百度开源的数据可视化，凭借着良好的交互性，精巧的图表设计，得到了众多开发者的认可。而 Python 是一门富有表达力的语言，很适合用于数据处理。当数据分析遇上数据可视化时，<a href="https://github.com/pyecharts/pyecharts" target="_blank" rel="noopener">pyecharts</a> 诞生了。</p>
<p>pyecharts原本自带的<strong>Geo()</strong>模块中中国地图的底图是全国范围的geojson文件，如果想要使用自定义区域底图，比如长三角范围内各个城市的该怎么办呢？</p>
<p>这篇就来讲讲我怎么搞的。</p>
<h2 id="1-下载自己所需的geojson文件"><a href="#1-下载自己所需的geojson文件" class="headerlink" title="1. 下载自己所需的geojson文件"></a>1. 下载自己所需的geojson文件</h2><p>这里推荐阿里云提供的基于高德地图的geojson文件下载地址：<a href="https://datav.aliyun.com/tools/atlas/index.html" target="_blank" rel="noopener">https://datav.aliyun.com/tools/atlas/index.html</a></p>
<img src="/2021/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/%E9%98%BF%E9%87%8C%E4%BA%91geojson%E4%B8%8B%E8%BD%BD.PNG" class title="[阿里云geojson下载]">

<p>自己可以根据需要处理数据，拼接多个geojson文件，获得自定义范围的地图底图。</p>
<p>比如我这里合并了长三角范围内的26个城市的geojson。</p>
<img src="/2021/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/%E5%90%88%E5%B9%B6%E5%90%8E%E7%9A%84%E9%95%BF%E4%B8%89%E8%A7%92geojson.PNG" class title="[合并后的长三角geojson]">

<h2 id="2-pyecharts替换Geo-地图底图"><a href="#2-pyecharts替换Geo-地图底图" class="headerlink" title="2. pyecharts替换Geo()地图底图"></a>2. pyecharts替换Geo()地图底图</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>charts <span class="token keyword">import</span> Map<span class="token punctuation">,</span>Geo
<span class="token keyword">import</span> pyecharts<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>utils
<span class="token keyword">from</span> pyecharts<span class="token punctuation">.</span>globals <span class="token keyword">import</span> CurrentConfig<span class="token punctuation">,</span> NotebookType<span class="token punctuation">,</span>ChartType<span class="token punctuation">,</span> SymbolType
<span class="token keyword">from</span> pyecharts <span class="token keyword">import</span> options <span class="token keyword">as</span> opts
CurrentConfig<span class="token punctuation">.</span>NOTEBOOK_TYPE <span class="token operator">=</span> NotebookType<span class="token punctuation">.</span>JUPYTER_LAB <span class="token comment" spellcheck="true">#jupyterlab这里需要额外配置</span>

<span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"geojson\长三角合并geojson.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#加载我们的geojson文件</span>
    j <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
c <span class="token operator">=</span> <span class="token punctuation">(</span>
    Geo<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span>add_js_funcs<span class="token punctuation">(</span><span class="token string">"echarts.registerMap('上海', {})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用js function，将原来Geo()自带的上海地图换成我们自己的geojson文件</span>
    <span class="token punctuation">.</span>add_schema<span class="token punctuation">(</span>maptype<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">,</span>label_opts<span class="token operator">=</span>opts<span class="token punctuation">.</span>LabelOpts<span class="token punctuation">(</span>is_show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用底图</span>
<span class="token punctuation">)</span>
c<span class="token punctuation">.</span>load_javascript<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使其支持自定义js</span>
c<span class="token punctuation">.</span>render_notebook<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#直接展示在jupyterlab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/2021/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/%E9%95%BF%E4%B8%89%E8%A7%92%E5%BA%95%E5%9B%BE.PNG" class title="[长三角底图]">

<h2 id="3-基于底图进行自定义展示"><a href="#3-基于底图进行自定义展示" class="headerlink" title="3. 基于底图进行自定义展示"></a>3. 基于底图进行自定义展示</h2><p>比如我这里绘制了城市间的流动线条。</p>
<img src="/2021/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/08/24/%E3%80%90jupyterlab+pyecharts%E3%80%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E5%9B%BE%E7%9A%84%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/%E9%95%BF%E4%B8%89%E8%A7%92%E5%87%BA%E8%A1%8C%E6%84%8F%E6%84%BF.gif" class title="[长三角出行意愿]">]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>jupyterlab</tag>
        <tag>python</tag>
        <tag>pyecharts</tag>
        <tag>地图API</tag>
      </tags>
  </entry>
  <entry>
    <title>【python+geopy包】地理信息检索</title>
    <url>/2020/11/04/%E3%80%90python+geopy%E5%8C%85%E3%80%91%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<img src="/2020/11/04/%E3%80%90python+geopy%E5%8C%85%E3%80%91%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/11/04/%E3%80%90python+geopy%E5%8C%85%E3%80%91%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAK.png" class title="[百度地图AK]">

<p><strong>2.开始地理编码</strong></p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> geopy<span class="token punctuation">.</span>geocoders <span class="token keyword">import</span> Nominatim<span class="token punctuation">,</span>BaiduV3

geolocator <span class="token operator">=</span> Nominatim<span class="token punctuation">(</span>user_agent<span class="token operator">=</span><span class="token string">"myapp"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#基于openStreetMap</span>
location <span class="token operator">=</span> geolocator<span class="token punctuation">.</span>geocode<span class="token punctuation">(</span>query<span class="token operator">=</span><span class="token string">"南京站"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>raw<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>longitude<span class="token punctuation">,</span>location<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#WGS84坐标系</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>address<span class="token punctuation">)</span>

geolocator <span class="token operator">=</span> BaiduV3<span class="token punctuation">(</span>api_key<span class="token operator">=</span><span class="token string">'输入你申请的ak'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#基于百度API构造实例</span>
location <span class="token operator">=</span> geolocator<span class="token punctuation">.</span>geocode<span class="token punctuation">(</span>query<span class="token operator">=</span><span class="token string">"南京站"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#检索字符串</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回原始信息</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>longitude<span class="token punctuation">,</span>location<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出百度坐标系下经纬度坐标</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>OpenStreetMap结果：
{&#39;place_id&#39;: 304447935, &#39;licence&#39;: &#39;Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright&#39;, &#39;osm_type&#39;: &#39;node&#39;, &#39;osm_id&#39;: 8042210546, &#39;boundingbox&#39;: [&#39;32.0912644&#39;, &#39;32.0913644&#39;, &#39;118.7913084&#39;, &#39;118.7914084&#39;], &#39;lat&#39;: &#39;32.0913144&#39;, &#39;lon&#39;: &#39;118.7913584&#39;, &#39;display_name&#39;: &#39;南京站, 南京站换乘通道, 鼓楼区, 南京市, 盱眙县, 江苏省, 210037, China 中国&#39;, &#39;class&#39;: &#39;railway&#39;, &#39;type&#39;: &#39;stop&#39;, &#39;importance&#39;: 0.11100000000000002}
(118.7913584,32.0913144)
南京站, 南京站换乘通道, 鼓楼区, 南京市, 盱眙县, 江苏省, 210037, China 中国

百度地图API结果：
{&#39;location&#39;: {&#39;lng&#39;: 118.80371375406085, &#39;lat&#39;: 32.093502120303725}, &#39;precise&#39;: 0, &#39;confidence&#39;: 50, &#39;comprehension&#39;: 0, &#39;level&#39;: &#39;火车站&#39;}
(118.80371375406085,32.093502120303725)
火车站</code></pre><h2 id="计算距离"><a href="#计算距离" class="headerlink" title="计算距离"></a>计算距离</h2><p>注意，<code>geopy.distance</code>下的<code>geodestic</code>默认测算的是<strong>WGS-84</strong>坐标系下的大地距离。</p>
<p>刚刚调用百度地图API进行的地理编码检索得到的是百度坐标系下的经纬度，需提前进行转换。</p>
<p>这里还是直接用<strong>OpenStreetMap</strong>下的<strong>WGS-84坐标系</strong>下的经纬度作为示例。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> geopy<span class="token punctuation">.</span>geocoders <span class="token keyword">import</span> Nominatim<span class="token comment" spellcheck="true">#经纬度检索</span>
<span class="token keyword">from</span> geopy<span class="token punctuation">.</span>distance <span class="token keyword">import</span> geodesic<span class="token comment" spellcheck="true">#计算距离</span>

geolocator <span class="token operator">=</span> Nominatim<span class="token punctuation">(</span>user_agent<span class="token operator">=</span><span class="token string">"myapp"</span><span class="token punctuation">)</span>
location1 <span class="token operator">=</span> geolocator<span class="token punctuation">.</span>geocode<span class="token punctuation">(</span>query<span class="token operator">=</span><span class="token string">"南京站"</span><span class="token punctuation">)</span>
location2 <span class="token operator">=</span> geolocator<span class="token punctuation">.</span>geocode<span class="token punctuation">(</span>query<span class="token operator">=</span><span class="token string">"南京禄口国际机场"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location1<span class="token punctuation">.</span>longitude<span class="token punctuation">,</span>location1<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location2<span class="token punctuation">.</span>longitude<span class="token punctuation">,</span> location2<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'两地距离%s公里'</span><span class="token operator">%</span>geodesic<span class="token punctuation">(</span><span class="token punctuation">(</span>location1<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span>location1<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>location2<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span>location2<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>km<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#可以设置单位为公里、米、英里等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>输出结果：
(118.7913584,32.0913144)
(118.87176715003275,31.7324679)
两地距离40.51108155886417公里</code></pre>]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>地图API</tag>
        <tag>geopy</tag>
      </tags>
  </entry>
  <entry>
    <title>【win10无Anaconda】JupyterLab更改默认启动路径及创建桌面快捷方式</title>
    <url>/2021/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="【win10无Anaconda】JupyterLab更改默认启动路径及创建桌面快捷方式"><a href="#【win10无Anaconda】JupyterLab更改默认启动路径及创建桌面快捷方式" class="headerlink" title="【win10无Anaconda】JupyterLab更改默认启动路径及创建桌面快捷方式"></a>【win10无Anaconda】JupyterLab更改默认启动路径及创建桌面快捷方式</h1><p>每一次<strong>JupyterLab</strong>或者<strong>Jupyter Notebook</strong>启动时都需要在命令行下跳至对应目录文件夹，再输入<code>jupyter lab</code>或者<code>jupyter notebook</code>启动是不是很麻烦？今天来记录一下两个小设置，让启动<strong>JupyterLab</strong>直接双击桌面快捷方式图标即可。</p>
<h2 id="1-JupyterLab更改默认启动路径"><a href="#1-JupyterLab更改默认启动路径" class="headerlink" title="1. JupyterLab更改默认启动路径"></a>1. JupyterLab更改默认启动路径</h2><p>已经有很多博客介绍如何更改<strong>Jupyter Notebook</strong>的默认启动路径，但是新一代的<strong>JupyterLab</strong>似乎还没有很多帖子，我这里就来记录一下。其实与<strong>Jupyter Notebook</strong>配置类似，</p>
<p>（1）先在<code>cmd</code>下输入:</p>
<p><code>jupyter lab --generate-config</code></p>
<p>生成默认配置文件。</p>
<p>（2）找到刚刚生成的配置文件，默认存储于<code>C:\Users\你的用户\.jupyter</code>路径下，打开jupyter_lab_config.py`文件。</p>
<p>（3）在412行左右，修改路径文件为你需要的默认启动路径。</p>
<p>注意：使用<strong>/</strong>分隔路径，同时记得<strong>去掉前面的#号</strong>。</p>
<img src="/2021/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84.PNG" class title="[修改启动路径]">

<p>（4）保存退出即可。</p>
<h2 id="2-创建-Jupyter-lab桌面快捷方式"><a href="#2-创建-Jupyter-lab桌面快捷方式" class="headerlink" title="2. 创建 Jupyter lab桌面快捷方式"></a>2. 创建 Jupyter lab桌面快捷方式</h2><p>网上我查到的都是讲解如何在<strong>Anaconda</strong>环境下创建<strong>JupyterLab</strong>快捷方式，但是我没有装体积庞大的<strong>Anaconda</strong>。其实很简单，自己编写一个简单的<strong>bat</strong>程序，然后为其创建桌面快捷方式并且自定义图标即可。</p>
<p>（1）创建一个记事本文件，输入：</p>
<p><code>jupyter lab</code></p>
<p>（2）更改记事本文件的后缀名为<code>.bat</code></p>
<p>（3）<code>.bat</code>文件无法直接更改图标，你先将<code>bat</code>程序放到你电脑里一个安全的路径，然后右键发送到桌面快捷方式。</p>
<p>（4）右键刚刚创建的快捷方式，点击<strong>属性</strong>，而后点击<strong>更改图标</strong>，设为你想要的图标即可。</p>
<img src="/2021/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/%E6%9B%B4%E6%94%B9%E5%9B%BE%E6%A0%87.PNG" class title="[更改图标]">

<p>（5）图标文件的后缀为<code>.ico</code>，可以下载常见的<code>.jpg,.png</code>格式图片制作。</p>
<p>可以另存为.bmp文件再直接改后缀为.ico，不过这样图片质量损失较大。建议使用在线的.ico制作网站，上传图片转换即可。</p>
<img src="/2021/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/jupyterlab.png" class title="[jupyterlab_png]">

<p>（6）然后双击桌面的快捷方式，即可启动Jupyter lab啦！</p>
<img src="/2021/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/02/24/%E3%80%90%E6%97%A0Anaconda%E3%80%91Jupyterlab%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/%E5%9B%BE%E6%A0%87.PNG" class title="[图标]">]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>JupyterLab</tag>
      </tags>
  </entry>
  <entry>
    <title>下载PeMS交通流数据指南</title>
    <url>/2020/06/15/%E4%B8%8B%E8%BD%BDPeMS%E4%BA%A4%E9%80%9A%E6%B5%81%E6%95%B0%E6%8D%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>今天给大家推荐一个开放的交通数据库，美国加州交通运输局的PeMS数据库，这里有着长达10年的高速公路检测器数据。包含流率、速度、占有率、重车比例、延误、车辆行驶里程、车辆行驶时间、交通事故等类型数据。很多学者都用这里的数据进行研究。
所以这里给大家介绍一下这个数据库下载数据的使用方式。</p>
<h2 id="1-要有可以科学上网的VPN"><a href="#1-要有可以科学上网的VPN" class="headerlink" title="1. 要有可以科学上网的VPN"></a>1. 要有可以科学上网的VPN</h2><p>这个请先自行解决。</p>
<h2 id="2-登录PeMS网站并注册账号"><a href="#2-登录PeMS网站并注册账号" class="headerlink" title="2. 登录PeMS网站并注册账号"></a>2. 登录PeMS网站并注册账号</h2><p>官方网址：<a href="http://pems.dot.ca.gov/" target="_blank" rel="noopener">http://pems.dot.ca.gov/</a>
首页右侧有<font color="red">apply for an account</font>的链接，注册完毕后回到首页右上角登陆已通过的注册账号。</p>
<img src="/2020/06/15/%E4%B8%8B%E8%BD%BDPeMS%E4%BA%A4%E9%80%9A%E6%B5%81%E6%95%B0%E6%8D%AE%E6%8C%87%E5%8D%97/06/15/%E4%B8%8B%E8%BD%BDPeMS%E4%BA%A4%E9%80%9A%E6%B5%81%E6%95%B0%E6%8D%AE%E6%8C%87%E5%8D%97/PeMS%E9%A6%96%E9%A1%B5.PNG" class title="[PeMS首页]">

<h2 id="3-明确要下载的数据类型：线：路段-点：检测器"><a href="#3-明确要下载的数据类型：线：路段-点：检测器" class="headerlink" title="3. 明确要下载的数据类型：线：路段|点：检测器"></a>3. 明确要下载的数据类型：线：路段|点：检测器</h2><p>登录进去后，可以看到上面有一栏<font color="blue">“Overview, Facilities&amp;Devices, Performance, Data Quality, Events”</font>，这里细分又有很多数据，大家可以自行根据需要点进去查看。
这里我主要介绍下载集计的交通流量、速度、占有率等交通流宏观参数数据。</p>
<img src="/2020/06/15/%E4%B8%8B%E8%BD%BDPeMS%E4%BA%A4%E9%80%9A%E6%B5%81%E6%95%B0%E6%8D%AE%E6%8C%87%E5%8D%97/06/15/%E4%B8%8B%E8%BD%BDPeMS%E4%BA%A4%E9%80%9A%E6%B5%81%E6%95%B0%E6%8D%AE%E6%8C%87%E5%8D%97/PeMS%E7%99%BB%E9%99%86%E5%90%8E%E7%95%8C%E9%9D%A2.PNG" class title="[PeMS登陆后界面]">
<p>如这张图所示，以下载某个检测器数据为例，我这里下载I5高速公路主线上编号#716895的检测器<font color="blue">Aggregates</font>集计数据。
然后就会跳转到这个检测器的数据，并且系统也提供了基础的数据图表供你直观观看。</p>
<img src="/2020/06/15/%E4%B8%8B%E8%BD%BDPeMS%E4%BA%A4%E9%80%9A%E6%B5%81%E6%95%B0%E6%8D%AE%E6%8C%87%E5%8D%97/06/15/%E4%B8%8B%E8%BD%BDPeMS%E4%BA%A4%E9%80%9A%E6%B5%81%E6%95%B0%E6%8D%AE%E6%8C%87%E5%8D%97/%E6%A3%80%E6%B5%8B%E5%99%A8%E6%95%B0%E6%8D%AE%E7%A4%BA%E4%BE%8B.PNG" class title="[检测器数据示例]">

<h2 id="4-选择数据的属性和精度"><a href="#4-选择数据的属性和精度" class="headerlink" title="4. 选择数据的属性和精度"></a>4. 选择数据的属性和精度</h2><p>Quantity, Second Quantity:要下载的数据类型，如流量、速度、占有率等。
Granularity: 数据精度，月、周、日、5分钟的颗粒度。
另外，可以选择数据的日期覆盖时段、节假日、车道等。</p>
<p>然后点击需要下载的数据格式，这里一般下载<font color="blue">EXPORT to.XLS</font>，比较便于后续数据分析。</p>
<p>好了，就是这么简单，下一篇我来介绍一下我如何用这里的数据进行交通流量的时间序列建模预测。</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>交通流</tag>
      </tags>
  </entry>
  <entry>
    <title>【自然语言处理】Wordcloud词云分析+LDA主题分类</title>
    <url>/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>最近在一门课上，老师分享了一篇关于应用自然语言处理（NLP）模型分析交通领域研究主题分类的论文，我觉得写得很好很有意思。所以，自己也进行一下尝试。
主要分为<strong>Wordcloud词云展示</strong>和<strong>Latent Dirichlet Allocation（LDA）模型主题分类</strong>两部分。</p>
<p>参考文献：<a href="https://www.sciencedirect.com/science/article/pii/S0968090X17300207" target="_blank" rel="noopener">Sun, L., &amp; Yin, Y. (2017). Discovering themes and trends in transportation research using topic modeling. Transportation Research Part C: Emerging Technologies, 77, 49-66. doi:10.1016/j.trc.2017.01.013</a></p>
<p>本次分析的是2017年至2020年发表的交通领域关于<strong>“Mobility-as-a-Service(MaaS)”</strong>的30篇论文的摘要部分。</p>
<img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/%E6%96%87%E7%8C%AE%E6%A6%82%E8%A7%88.PNG" class title="[文献展示]">

<h2 id="wordcloud词云展示"><a href="#wordcloud词云展示" class="headerlink" title="wordcloud词云展示"></a>wordcloud词云展示</h2><ol>
<li><p>首先对文本进行预处理：</p>
<ul>
<li><p>去除标点符号，按空格拆分句子
<code>mytext=re.sub(r'[.,()]','',mytext).split(' ') #正侧表达式去除标点</code></p>
</li>
<li><p>用NLTK的wordnet模块进行词形还原</p>
<pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">from</span> nltk<span class="token punctuation">.</span>stem <span class="token keyword">import</span> WordNetLemmatizer
  wnl <span class="token operator">=</span> WordNetLemmatizer<span class="token punctuation">(</span><span class="token punctuation">)</span>
  remytext <span class="token operator">=</span> <span class="token string">''</span>
  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>mytext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      mytext<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>wnl<span class="token punctuation">.</span>lemmatize<span class="token punctuation">(</span>mytext<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#词性还原</span>
      remytext<span class="token operator">=</span>remytext<span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>mytext<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  mytext<span class="token operator">=</span>remytext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注：wordnet包需要另外独自安装，不然会报如下错误：</strong>
<code>Resource wordnet not found. Please use the NLTK Downloader to obtain the resource:</code></p>
<img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/wordnet%E7%BC%BA%E5%A4%B1%E6%8A%A5%E9%94%99.PNG" class>
<p><strong>这里补充wordnet包安装方法：</strong>
  (1) 命令行cmd打开，输入python；
(2) 继续输入<code>import nltk</code>和<code>nltk.download()</code>如下图所示：</p>
  <img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/wordnet%E4%B8%8B%E8%BD%BDcmd.PNG" class>
<p>(3) 可能会报错远程主机强制关闭了一个连接。
  解决办法：(1)连VPN (2)利用别人已经下载到本地的wordnet包,具体参照这篇博客。<a href="https://blog.csdn.net/Charchunchiu/article/details/96436736?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Python NLTK WordNet的在线与手动安装方法</a>
  (4) 正常情况下,弹出如下窗口，选择<code>Corpora/wordnet</code>下载即可。</p>
  <img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/wordnet%E4%B8%8B%E8%BD%BD%E7%95%8C%E9%9D%A2.PNG" class>
</li>
<li><p>设置停用词</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> STOPWORDS<span class="token comment" spellcheck="true">#导入原有的停用词包</span>
additional_stopwords<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">with</span> open<span class="token punctuation">(</span>stopwordsfile<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
  <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
      additional_stopwords<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
stop_words <span class="token operator">=</span> additional_stopwords <span class="token operator">+</span> list<span class="token punctuation">(</span>STOPWORDS<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#额外添加自己的停用词</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>应用wordcloud包</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud
wordcloud <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>stopwords<span class="token operator">=</span>stop_words<span class="token punctuation">,</span>background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>collocations<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>colormap<span class="token operator">=</span><span class="token string">'viridis'</span><span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">2160</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">1080</span><span class="token punctuation">,</span>max_words<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>prefer_horizontal<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>generate<span class="token punctuation">(</span>mytext<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wordcloud<span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/maas%E8%AF%8D%E4%BA%91%E7%BB%93%E6%9E%9C.PNG" class title="[词云展示]">

</li>
</ol>
<h2 id="LDA主题分类"><a href="#LDA主题分类" class="headerlink" title="LDA主题分类"></a>LDA主题分类</h2><p>这里使用<strong>sklearn</strong>的<strong>LDA</strong>包。
基于之前的<strong>文本预处理</strong>，还需要转换为<strong>词向量</strong>的形式，才可放入LDA模型训练。
具体代码如下：</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer <span class="token comment" spellcheck="true">#词向量转换模块</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">import</span> LatentDirichletAllocation <span class="token keyword">as</span> LDA
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> time
<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">import</span> MultipleLocator

<span class="token comment" spellcheck="true">#Initialise the count vectorizer with the English stop words</span>
count_vectorizer <span class="token operator">=</span> CountVectorizer<span class="token punctuation">(</span>stop_words<span class="token operator">=</span>stop_words<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#这里也可以设置停用词</span>
<span class="token comment" spellcheck="true"># Fit and transform the processed titles</span>
count_data <span class="token operator">=</span> count_vectorizer<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>mytext<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">print_topics</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> count_vectorizer<span class="token punctuation">,</span> n_top_words<span class="token punctuation">)</span><span class="token punctuation">:</span>
    words <span class="token operator">=</span> count_vectorizer<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> topic_idx<span class="token punctuation">,</span> topic <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>model<span class="token punctuation">.</span>components_<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nTopic #%d:"</span> <span class="token operator">%</span> topic_idx<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                        <span class="token keyword">for</span> i <span class="token keyword">in</span> topic<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>n_top_words <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
n_topics <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
perplexityLst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token operator">*</span>len<span class="token punctuation">(</span>n_topics<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#训练LDA并打印训练时间</span>
lda_models <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> idx<span class="token punctuation">,</span> n_topic <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>n_topics<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>n_topic<span class="token punctuation">)</span>
    lda <span class="token operator">=</span> LDA<span class="token punctuation">(</span>n_components<span class="token operator">=</span>n_topic<span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span>learning_method<span class="token operator">=</span><span class="token string">'batch'</span><span class="token punctuation">,</span>

<span class="token comment" spellcheck="true">#                                    perp_tol=0.1, #default</span>

<span class="token comment" spellcheck="true">#                                    doc_topic_prior=1/n_topic, #default</span>

<span class="token comment" spellcheck="true">#                                    topic_word_prior=1/n_topic, #default</span>

                                    verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    lda<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>count_data<span class="token punctuation">)</span>
    perplexityLst<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> lda<span class="token punctuation">.</span>perplexity<span class="token punctuation">(</span>count_data<span class="token punctuation">)</span>
    lda_models<span class="token punctuation">.</span>append<span class="token punctuation">(</span>lda<span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"# of Topic: %d, "</span> <span class="token operator">%</span> n_topics<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"done in %0.3fs, N_iter %d, "</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">,</span> lda<span class="token punctuation">.</span>n_iter_<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Perplexity Score %0.3f"</span> <span class="token operator">%</span> perplexityLst<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#打印最佳模型</span>
number_words<span class="token operator">=</span><span class="token number">10</span>
best_index <span class="token operator">=</span> perplexityLst<span class="token punctuation">.</span>index<span class="token punctuation">(</span>min<span class="token punctuation">(</span>perplexityLst<span class="token punctuation">)</span><span class="token punctuation">)</span>
best_n_topic <span class="token operator">=</span> n_topics<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span>
best_model <span class="token operator">=</span> lda_models<span class="token punctuation">[</span>best_index<span class="token punctuation">]</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Best # of Topic: "</span><span class="token punctuation">,</span> best_n_topic<span class="token punctuation">)</span>
print_topics<span class="token punctuation">(</span>best_model<span class="token punctuation">,</span> count_vectorizer<span class="token punctuation">,</span> number_words<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#绘制不同主题数perplexity的不同</span>
fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>
ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
xaxis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>n_topics<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    xaxis<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_topics<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xaxis<span class="token punctuation">,</span> perplexityLst<span class="token punctuation">)</span>
x_major_locator<span class="token operator">=</span>MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"number of topics"</span><span class="token punctuation">)</span>
ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"Approximate Perplexity"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终我这里选择了分为3个主题。虽然2个的perplexity效果好一些，但我根据需要选择了3个。</p>
<img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/perplexity%E6%8C%87%E6%95%B0.PNG" class title="[perplexity指数]">

<p>Topic #1: 城市系统角度
model city public business alliance actor efficiency factor system new
Topic #2: 各出行模式运营商角度
user time market adoption road potential intermediary car operator public
Topic #3: 用户出行模式选择角度
car public model mode bundle sharing new travel choice demand</p>
<p>好了，这次就到这里了。具体的参数设置还是参照官方文档。</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>Wordcloud</tag>
        <tag>LDA</tag>
      </tags>
  </entry>
  <entry>
    <title>下载Bing搜索界面每日高清美图方法</title>
    <url>/2020/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Bing搜索的每日一图真的很好看，该如何下载呢？"><a href="#Bing搜索的每日一图真的很好看，该如何下载呢？" class="headerlink" title="Bing搜索的每日一图真的很好看，该如何下载呢？"></a><a href="https://cn.bing.com/" target="_blank" rel="noopener">Bing搜索</a>的每日一图真的很好看，该如何下载呢？</h3><ul>
<li><p>进入Bing搜索主页</p>
<img src="/2020/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/Bing%E9%A6%96%E9%A1%B5.PNG" class>
</li>
<li><p>按<code>F12</code>打开控制台。
在<code>Elements</code>下的<code>head</code>中找到图片链接地址。</p>
<img src="/2020/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/head%E9%93%BE%E6%8E%A5.PNG" class>
<p>复制粘贴到浏览器打开，右键图片另存为即可下载<code>1920*1080</code>分辨率无水印的图。
如果想下载更高清的<code>UHD</code>大图，将链接两处<code>1920*1080</code>的部分改为<code>UHD</code>即可。</p>
</li>
<li><p>如果想下载前几天的图。
点<code>Network</code>,按<code>Ctrl+R</code>刷新页面，再点首页右下角的向左的箭头，前面图片的链接就会显示出来。
同理复制链接粘贴打开下载。</p>
<img src="/2020/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/%E5%89%8D%E9%9D%A2%E9%93%BE%E6%8E%A5.PNG" class>
</li>
<li><p><strong>最后还是要注意，图片有版权，不能商业使用。</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>视觉和摄影</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>美图</tag>
      </tags>
  </entry>
  <entry>
    <title>使用高德开放平台API获取POI位置和路线信息</title>
    <url>/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>借助地图API接口，帮助我们快速获取大量的静态、动态数据是非常有效的。
这次我就来讲讲怎么利用高德开发平台API接口，获取一些设施位置和路径规划信息。</p>
<h2 id="高德开放平台"><a href="#高德开放平台" class="headerlink" title="高德开放平台"></a>高德开放平台</h2><p><a href="https://lbs.amap.com/api/webservice/summary" target="_blank" rel="noopener">高德开放平台</a>可以让你自己开发的应用嵌入高德服务，使用高德在地理信息服务上的贡献。
因为这次我主要需要用到的是一些信息搜索，所以用的是<code>开发支持->Web服务->Web服务API</code>，其他需要移动应用开发的可以去查询<strong>开发支持</strong>下的<strong>Web端、Andriod平台、IOS平台、微信小程序</strong>等等。</p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/web_API_intro.PNG" class>
<p>如平台的简介，它可以帮你实现搜索、路径规划、行驶距离测量等功能。</p>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>申请一个高德的适用于Web服务的<code>key</code>，之后在<code>URL</code>里需要填上自己的<code>key</code>。注意个人用户每日每个key的使用次数是有限额的，超限了查询信息返回会报错，但一个人可以申请好多个。</p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/key.PNG" class>

<h3 id="2-根据需要填充URL关键字"><a href="#2-根据需要填充URL关键字" class="headerlink" title="2. 根据需要填充URL关键字"></a>2. 根据需要填充URL关键字</h3><p>我们这次用<code>关键字搜索</code>功能，来查询POI(point of interest)信息，以查询某一城市的机场、火车站的枢纽地理信息为例。
根据开发文档提供的URL示例:<code><a href="https://restapi.amap.com/v3/place/text?parameters" target="_blank" rel="noopener">https://restapi.amap.com/v3/place/text?parameters</a></code>
我们把<code>parameters</code>替换为搜索时限定的一些关键词，并且用<code>&</code>连接不同的条件，记得替换你自己申请的key。
比如：<code><a href="https://restapi.amap.com/v3/place/text?keywords=火车站&amp;city=北京&amp;citylimit=true&amp;extensions=all&amp;key=你申请的key&amp;offset=20&amp;page=1" target="_blank" rel="noopener">https://restapi.amap.com/v3/place/text?keywords=火车站&amp;city=北京&amp;citylimit=true&amp;extensions=all&amp;key=你申请的key&amp;offset=20&amp;page=1</a></code></p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/keywords_search.PNG" class>

<p>返回的结果，也是参照开发文档，注意弄清层级结构，即可获取对应信息，默认返回<code>json</code>格式。</p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/result_parameter.PNG" class>

<p>我这里会主要想要获取经纬度信息，在<code>['pois']->['poi']->['location']</code>下面。</p>
<h3 id="3-使用python批量访问获取结果"><a href="#3-使用python批量访问获取结果" class="headerlink" title="3. 使用python批量访问获取结果"></a>3. 使用python批量访问获取结果</h3><p>用python的<code>requests</code>库，获取访问结果，完整代码如下。这里用简单的<code>GET</code>方式填充URL的参数即可，以后自己爬其他的信息还有可能要用到<code>POST</code>方式，但以字典方式传送参数也是一样的。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> math
<span class="token keyword">import</span> json
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token keyword">def</span> <span class="token function">get_station</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 抓取场站信息</span>
    url1 <span class="token operator">=</span> <span class="token string">"https://restapi.amap.com/v3/place/text?keywords=%s&amp;city=%s&amp;citylimit=true&amp;extensions=all&amp;key=你自己申请的key&amp;offset=20&amp;page=%d"</span><span class="token operator">%</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>city<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#查询机场和火车站的经纬度信息</span>
    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 请求高德地图Place API返回数据</span>
    content <span class="token operator">=</span> req<span class="token punctuation">.</span>content
    data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将获取的信息封装为字典</span>
    num<span class="token operator">=</span>int<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 提取场站总数</span>
    result <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'pois'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 提取字典中的有效信息</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>

    infoDf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'名称'</span><span class="token punctuation">,</span> <span class="token string">'经度'</span><span class="token punctuation">,</span> <span class="token string">'纬度'</span><span class="token punctuation">,</span> <span class="token string">'城市'</span><span class="token punctuation">,</span> <span class="token string">'类型'</span><span class="token punctuation">,</span> <span class="token string">'别名'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#返回有数据的情况下</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s无%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">#第一次的信息别浪费了</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        str_temp <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 保存总数到链表第一个元素</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>str_temp<span class="token punctuation">[</span><span class="token string">'alias'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            alias <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            alias <span class="token operator">=</span> str_temp<span class="token punctuation">[</span><span class="token string">'alias'</span><span class="token punctuation">]</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span>str_temp<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str_temp<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str_temp<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str_temp<span class="token punctuation">[</span><span class="token string">'cityname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alias<span class="token punctuation">)</span>
        singleinfo<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'名称'</span><span class="token punctuation">:</span>str_temp<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'经度'</span><span class="token punctuation">:</span>str_temp<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'纬度'</span><span class="token punctuation">:</span>str_temp<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'城市'</span><span class="token punctuation">:</span>str_temp<span class="token punctuation">[</span><span class="token string">'cityname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'类型'</span><span class="token punctuation">:</span>type<span class="token punctuation">,</span><span class="token string">'别名'</span><span class="token punctuation">:</span>alias<span class="token punctuation">}</span>
        singleinfoDf<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>singleinfo<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'名称'</span><span class="token punctuation">,</span> <span class="token string">'经度'</span><span class="token punctuation">,</span> <span class="token string">'纬度'</span><span class="token punctuation">,</span> <span class="token string">'城市'</span><span class="token punctuation">,</span><span class="token string">'类型'</span><span class="token punctuation">,</span><span class="token string">'别名'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        infoDf <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>infoDf<span class="token punctuation">,</span> singleinfoDf<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    totalpage<span class="token operator">=</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#每一页显示20条数据，算好页数</span>
    <span class="token keyword">if</span> totalpage <span class="token operator">></span><span class="token number">1</span> <span class="token punctuation">:</span>
        <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>totalpage<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#从第2页起</span>
            url2 <span class="token operator">=</span> <span class="token string">"https://restapi.amap.com/v3/place/text?keywords=%s&amp;city=%s&amp;citylimit=true&amp;extensions=all&amp;key=e3bc4d79724c51578f54e141d4085394&amp;offset=20&amp;page=%d"</span><span class="token operator">%</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>city<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#查询机场和火车站的经纬度信息</span>
            req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 请求高德地图Place API返回数据</span>
            content <span class="token operator">=</span> req<span class="token punctuation">.</span>content
            data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将获取的信息封装为字典</span>
            result <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'pois'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 提取字典中的有效信息</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                str_temp <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 保存总数到链表第一个元素</span>
                <span class="token keyword">if</span> len<span class="token punctuation">(</span>str_temp<span class="token punctuation">[</span><span class="token string">'alias'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
                    alias<span class="token operator">=</span><span class="token string">''</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    alias<span class="token operator">=</span>str_temp<span class="token punctuation">[</span><span class="token string">'alias'</span><span class="token punctuation">]</span>
                singleinfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'名称'</span><span class="token punctuation">:</span> str_temp<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'经度'</span><span class="token punctuation">:</span> str_temp<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                              <span class="token string">'纬度'</span><span class="token punctuation">:</span> str_temp<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'城市'</span><span class="token punctuation">:</span> str_temp<span class="token punctuation">[</span><span class="token string">'cityname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'类型'</span><span class="token punctuation">:</span>type<span class="token punctuation">,</span> <span class="token string">'别名'</span><span class="token punctuation">:</span> alias<span class="token punctuation">}</span>
                singleinfoDf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>singleinfo<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'名称'</span><span class="token punctuation">,</span> <span class="token string">'经度'</span><span class="token punctuation">,</span> <span class="token string">'纬度'</span><span class="token punctuation">,</span> <span class="token string">'城市'</span><span class="token punctuation">,</span><span class="token string">'类型'</span><span class="token punctuation">,</span><span class="token string">'别名'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                infoDf <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>infoDf<span class="token punctuation">,</span>singleinfoDf<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> infoDf

<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 开始抓取文件</span>
    citylist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'石家庄'</span><span class="token punctuation">,</span><span class="token string">'唐山'</span><span class="token punctuation">,</span><span class="token string">'邯郸'</span><span class="token punctuation">,</span><span class="token string">'保定'</span><span class="token punctuation">,</span><span class="token string">'沧州'</span><span class="token punctuation">,</span><span class="token string">'邢台'</span><span class="token punctuation">,</span><span class="token string">'廊坊'</span><span class="token punctuation">,</span><span class="token string">'承德'</span><span class="token punctuation">,</span><span class="token string">'张家口'</span><span class="token punctuation">,</span><span class="token string">'衡水'</span><span class="token punctuation">,</span><span class="token string">'秦皇岛'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#,'张家口','衡水','秦皇岛'</span>
    typelist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'机场'</span><span class="token punctuation">,</span><span class="token string">'火车站'</span><span class="token punctuation">]</span>
    whole_info <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'名称'</span><span class="token punctuation">,</span> <span class="token string">'经度'</span><span class="token punctuation">,</span> <span class="token string">'纬度'</span><span class="token punctuation">,</span> <span class="token string">'城市'</span><span class="token punctuation">,</span><span class="token string">'类型'</span><span class="token punctuation">,</span><span class="token string">'别名'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> cityname <span class="token keyword">in</span> citylist<span class="token punctuation">:</span>
        <span class="token keyword">for</span> type <span class="token keyword">in</span> typelist<span class="token punctuation">:</span>
            info <span class="token operator">=</span> get_station<span class="token punctuation">(</span>cityname<span class="token punctuation">,</span>type<span class="token punctuation">)</span>
            whole_info<span class="token operator">=</span>  pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>whole_info<span class="token punctuation">,</span>info<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    whole_info<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'/京津冀机场火车站信息.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf_8_sig'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>类似地，大家可以参照以上代码，去查询一下餐厅、公交站等其他设施的信息。</strong></p>
<h3 id="获取路径规划信息"><a href="#获取路径规划信息" class="headerlink" title="*获取路径规划信息"></a>*获取路径规划信息</h3><p>刚才是介绍如何用<code>关键字搜索</code>功能，进行一些POI点的信息查询。现在做一些稍微复杂一点点的更深入的查询。
查询两个点之间的不同交通方式的路径规划信息，比如<strong>驾车路线、耗时、距离，公交的路线、耗时、花费</strong>等。
此时查询<a href="https://lbs.amap.com/api/webservice/guide/api/direction" target="_blank" rel="noopener">路径规划</a>的对应开发文档。</p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/route_planning.PNG" class>

<ul>
<li><p>驾车路径规划
同理，弄清URL需要填充的参数。
<code><a href="https://restapi.amap.com/v3/direction/driving?parameters" target="_blank" rel="noopener">https://restapi.amap.com/v3/direction/driving?parameters</a></code>
我的示例:<code><a href="https://restapi.amap.com/v3/direction/driving?origin=116.603039,40.080525&amp;destination=116.427694,39.902779&amp;strategy=10&amp;output=json&amp;extensions=all&amp;key=你申请的key" target="_blank" rel="noopener">https://restapi.amap.com/v3/direction/driving?origin=116.603039,40.080525&amp;destination=116.427694,39.902779&amp;strategy=10&amp;output=json&amp;extensions=all&amp;key=你申请的key</a></code>
我这里就是用刚才查询到的北京首都国际机场的经纬度和北京站的经纬度，查询其之间的驾车路径策略。
然后可以请求访问<code>URL</code>，获取很多有用的信息，驾车路线、耗时、距离，乃至具体的导航方案、道路的红绿灯情况等等。</p>
</li>
<li><p>公交路径规划
<code><a href="https://restapi.amap.com/v3/direction/transit/integrated?parameters" target="_blank" rel="noopener">https://restapi.amap.com/v3/direction/transit/integrated?parameters</a></code>
我的示例:<code><a href="https://restapi.amap.com/v3/direction/transit/integrated?origin=116.603039,40.080525&amp;destination=116.427694,39.902779&amp;city=北京&amp;strategy=0&amp;output=json&amp;extensions=all&amp;key=你申请的key" target="_blank" rel="noopener">https://restapi.amap.com/v3/direction/transit/integrated?origin=116.603039,40.080525&amp;destination=116.427694,39.902779&amp;city=北京&amp;strategy=0&amp;output=json&amp;extensions=all&amp;key=你申请的key</a></code>
相似地查询公交策略，这里你可以选择根据不同策略，返回不同地路线，比如换乘最少、耗时最短等等。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>高德开发平台API会在查询一些信息时，起到很大帮助（百度开放平台API也是有相似的功能）。重点要去研读一下他们提供的<strong>开发文档</strong>，并且知道<code>URL</code>的组成，这样你就可以个性化的获取你想要的信息了。</li>
<li>更多的内容，还是需要自己去不断发掘。</li>
</ul>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>API</tag>
        <tag>地理信息</tag>
      </tags>
  </entry>
  <entry>
    <title>动态爬取携程网机票信息</title>
    <url>/2021/01/06/%E5%8A%A8%E6%80%81%E7%88%AC%E5%8F%96%E6%90%BA%E7%A8%8B%E7%BD%91%E6%9C%BA%E7%A5%A8%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>最近在做有关交通城际出行领域的课题，需要用到一些关于机票的信息，于是就想到从携程网进行爬取相关数据。</p>
<p>但是呢，携程网它的票务信息查询后是一个动态页面，需要下拉才能返回更多的查询结果。所以这需要在一般的解析静态页面的爬虫方式上，增加一个<strong>浏览器的模拟器</strong>，来模拟<strong>下拉</strong>这一行为。</p>
<p>本次就是用到<strong>selenium</strong>这一个包的<strong>webdriver</strong>来模拟<strong>打开浏览器</strong>和<strong>下拉</strong>这一行为。</p>
<p>话不多说，直接上代码和注释。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> time
<span class="token keyword">import</span> lxml<span class="token punctuation">.</span>html
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver

<span class="token keyword">def</span> <span class="token function">getFlightInfo</span><span class="token punctuation">(</span>fromcity<span class="token punctuation">,</span>tocity<span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url<span class="token operator">=</span><span class="token string">'https://flights.ctrip.com/itinerary/oneway/%s-%s?classType=ALL&amp;ct=1606269725709&amp;date=%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>fromcity<span class="token punctuation">,</span>tocity<span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#携程的单程机票查询url</span>
    <span class="token comment" spellcheck="true">#parse the html</span>
    browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>
    browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#等一会儿，等信息解析</span>
    browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模拟点击按钮</span>
    browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#多注意休息</span>
    browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'dtime-sort'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#模拟点击按时间排序按钮</span>
    browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
    browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'dtime-sort'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#再模拟一次点击按时间排序按钮，确保出发时间从早到晚排序</span>
    browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 获取页面初始高度</span>
    js <span class="token operator">=</span> <span class="token string">"return action=document.body.scrollHeight"</span>
    height <span class="token operator">=</span> browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 将滚动条调整至页面底部</span>
    browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0, document.body.scrollHeight)'</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 定义初始时间戳（秒）</span>
    t1 <span class="token operator">=</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 定义循环标识，用于终止while循环</span>
    status <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token comment" spellcheck="true"># 重试次数</span>
    num <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> status<span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 获取当前时间戳（秒）</span>
        t2 <span class="token operator">=</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 判断时间初始时间戳和当前时间戳相差是否大于30秒，小于30秒则下拉滚动条</span>
        <span class="token keyword">if</span> t2 <span class="token operator">-</span> t1 <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">:</span>
            new_height <span class="token operator">=</span> browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>
            <span class="token keyword">if</span> new_height <span class="token operator">></span> height<span class="token punctuation">:</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
                browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0, document.body.scrollHeight)'</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true"># 重置初始页面高度</span>
                height <span class="token operator">=</span> new_height
                <span class="token comment" spellcheck="true"># 重置初始时间戳，重新计时</span>
                t1 <span class="token operator">=</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> num <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 当超过30秒页面高度仍然没有更新时，进入重试逻辑，重试3次，每次等待30秒</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
            num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 超时并超过重试次数，程序结束跳出循环，并认为页面已经加载完毕！</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"滚动条已经处于页面最下方！"</span><span class="token punctuation">)</span>
            status <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token comment" spellcheck="true"># 滚动条调整至页面顶部</span>
            browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0, 0)'</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>

 <span class="token comment" spellcheck="true">#要用到正则表达式</span>
 flightnumber<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_elements_by_css_selector<span class="token punctuation">(</span><span class="token string">".search_table_header>.inb.logo>div>div>span>span>span"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#空格设置为点,>层级关系,不可以跃层查询</span>
    departtime<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_elements_by_css_selector<span class="token punctuation">(</span><span class="token string">".search_box.search_box_tag.search_box_light.Label_Flight>div>div>.inb.right>div.time_box"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#空格设置为点,>层级关系</span>
    departhub <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_elements_by_css_selector<span class="token punctuation">(</span><span class="token string">".search_box.search_box_tag.search_box_light.Label_Flight>div>div>.inb.right>div.airport"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 空格设置为点</span>
    arrivetime<span class="token operator">=</span>browser<span class="token punctuation">.</span>find_elements_by_css_selector<span class="token punctuation">(</span><span class="token string">".search_box.search_box_tag.search_box_light.Label_Flight>div>div>.inb.left>div.time_box"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#空格设置为点,>层级关系</span>
    arrivehub <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_elements_by_css_selector<span class="token punctuation">(</span><span class="token string">".search_box.search_box_tag.search_box_light.Label_Flight>div>div>.inb.left>div.airport"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 空格设置为点</span>

    flightnumberlist<span class="token operator">=</span><span class="token punctuation">[</span>content<span class="token punctuation">.</span>text <span class="token keyword">for</span> content <span class="token keyword">in</span> flightnumber<span class="token punctuation">]</span>
    flightnumberlist<span class="token operator">=</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">!=</span> <span class="token string">'共享'</span><span class="token punctuation">,</span> flightnumberlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除多余元素</span>
    departtimelist<span class="token operator">=</span><span class="token punctuation">[</span>content<span class="token punctuation">.</span>text <span class="token keyword">for</span> content <span class="token keyword">in</span> departtime<span class="token punctuation">]</span>
    departhublist<span class="token operator">=</span><span class="token punctuation">[</span>content<span class="token punctuation">.</span>text <span class="token keyword">for</span> content <span class="token keyword">in</span> departhub<span class="token punctuation">]</span>
    arrivetimelist<span class="token operator">=</span><span class="token punctuation">[</span>content<span class="token punctuation">.</span>text <span class="token keyword">for</span> content <span class="token keyword">in</span> arrivetime<span class="token punctuation">]</span>
    arrivehublist<span class="token operator">=</span><span class="token punctuation">[</span>content<span class="token punctuation">.</span>text <span class="token keyword">for</span> content <span class="token keyword">in</span> arrivehub<span class="token punctuation">]</span>
    <span class="token keyword">return</span> flightnumberlist<span class="token punctuation">,</span>departtimelist<span class="token punctuation">,</span>departhublist<span class="token punctuation">,</span>arrivetimelist<span class="token punctuation">,</span>arrivehublist

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    date<span class="token operator">=</span><span class="token string">'2020-11-27'</span>
    fromcity<span class="token operator">=</span><span class="token string">'bjs'</span><span class="token comment" spellcheck="true">#查询北京到上海的机票</span>
    tocity<span class="token operator">=</span><span class="token string">'sha'</span><span class="token comment" spellcheck="true">#查询北京到上海的机票</span>
    path <span class="token operator">=</span> <span class="token string">'\\'</span>
    flightnumberlist<span class="token punctuation">,</span>departtimelist<span class="token punctuation">,</span>departhublist<span class="token punctuation">,</span>arrivetimelist<span class="token punctuation">,</span>arrivehublist<span class="token operator">=</span>getFlightInfo<span class="token punctuation">(</span>fromcity<span class="token punctuation">,</span> tocity<span class="token punctuation">,</span> date<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>flightnumberlist<span class="token punctuation">)</span>
    flightinfodict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'flightnumber'</span><span class="token punctuation">:</span>flightnumberlist<span class="token punctuation">,</span><span class="token string">'departtime'</span><span class="token punctuation">:</span>departtimelist<span class="token punctuation">,</span><span class="token string">'departhub'</span><span class="token punctuation">:</span>departhublist<span class="token punctuation">,</span>
                        <span class="token string">'arrivetime'</span><span class="token punctuation">:</span>arrivetimelist<span class="token punctuation">,</span><span class="token string">'arrivehub'</span><span class="token punctuation">:</span>arrivehublist<span class="token punctuation">}</span>
    flightinfodf<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>flightinfodict<span class="token punctuation">)</span>
    flightinfodf<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">'%s-%s航空班次信息.csv'</span><span class="token operator">%</span><span class="token punctuation">(</span>fromcity<span class="token punctuation">,</span>tocity<span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf_8_sig'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>selenium</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将【geojson文件】转成【shp文件】在arcgis中使用</title>
    <url>/2022/01/02/%E5%A6%82%E4%BD%95%E5%B0%86%E3%80%90geojson%E6%96%87%E4%BB%B6%E3%80%91%E8%BD%AC%E6%88%90%E3%80%90shp%E6%96%87%E4%BB%B6%E3%80%91%E5%9C%A8arcgis%E4%B8%AD%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="如何将【geojson文件】转成【shp文件】在arcgis中使用"><a href="#如何将【geojson文件】转成【shp文件】在arcgis中使用" class="headerlink" title="如何将【geojson文件】转成【shp文件】在arcgis中使用"></a>如何将【geojson文件】转成【shp文件】在arcgis中使用</h1><p>当缺少中国省市对应的地图shp文件时，可以去阿里云的网站下载最新的geojson文件，再使用geopandas库转换为shp文件使用。</p>
<h2 id="1-在阿里云geojson地图下载网站下载相应geojson文件"><a href="#1-在阿里云geojson地图下载网站下载相应geojson文件" class="headerlink" title="1. 在阿里云geojson地图下载网站下载相应geojson文件"></a>1. 在阿里云geojson地图下载网站下载相应geojson文件</h2><p><a href="http://datav.aliyun.com/portal/school/atlas/area_selector" target="_blank" rel="noopener">http://datav.aliyun.com/portal/school/atlas/area_selector</a></p>
<h2 id="2-使用python的【geopandas】库"><a href="#2-使用python的【geopandas】库" class="headerlink" title="2. 使用python的【geopandas】库"></a>2. 使用python的【geopandas】库</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> geopandas <span class="token keyword">as</span> gdp

data <span class="token operator">=</span> gdp<span class="token punctuation">.</span>read_file<span class="token punctuation">(</span><span class="token string">'\地图.json'</span><span class="token punctuation">)</span>
data<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'\地图shp'</span><span class="token punctuation">,</span> driver<span class="token operator">=</span><span class="token string">'ESRI Shapefile'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#地图shp是存储的文件夹名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-导入arcgis即可"><a href="#3-导入arcgis即可" class="headerlink" title="3. 导入arcgis即可"></a>3. 导入arcgis即可</h2>]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>arcgis</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>如何修改python第三方库源码</title>
    <url>/2022/01/17/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h1 id="如何修改python第三方库源码"><a href="#如何修改python第三方库源码" class="headerlink" title="如何修改python第三方库源码"></a>如何修改python第三方库源码</h1><p>有的时候下载的第三方python库中有些参数没有开放让我们自定义调整，比如你要用那个库自带的出图，它可能又是基于matplotlib的一个函数，然后设为了默认。</p>
<p>其实非常简单！由于Python是解释型编程语言，不需要编译，直接就能运行。</p>
<p>以我要修改的<strong>PyALE</strong>库中的rug plot的颜色和透明度为例。</p>
<ol>
<li><p>找到源码位置，即/python3.7\Lib\site-packages\PyALE_src\ALE_1D.py</p>
</li>
<li><p>找到rug plot内置的位置，修改保存</p>
<img src="/2022/01/17/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81/01/17/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81/code_position.png" class title="[code_position]">
</li>
<li><p>修改的代码就能够在下次运行时立即生效</p>
</li>
</ol>
<img src="/2022/01/17/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81/01/17/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81/before.JPG" class title="[before]">

<img src="/2022/01/17/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81/01/17/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%BA%90%E7%A0%81/after.PNG" class title="[after]">

]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>基于多元LSTM模型的短时交通流量预测</title>
    <url>/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<p>正好这学期选修了一门交通流理论的课程，这里介绍一下我最后的课程论文，如何基于上一篇提到的在PeMS数据库下载到的数据，应用LSTM模型进行短时交通流量预测。</p>
<h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h2><p>2019年9月1日至9月28日四周的交通流量数据，数据粒度是5分钟一统计，属性包含流率(veh/ 5 minutes),速度(mph),占有率(%),重车比例(%)。</p>
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA.PNG" class title="[数据展示]">

<h2 id="2-数据描述性统计"><a href="#2-数据描述性统计" class="headerlink" title="2. 数据描述性统计"></a>2. 数据描述性统计</h2><h3 id="1-绘制流率、速度、密度三参数基本图"><a href="#1-绘制流率、速度、密度三参数基本图" class="headerlink" title="(1) 绘制流率、速度、密度三参数基本图"></a>(1) 绘制流率、速度、密度三参数基本图</h3><img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/flow&occ.png" class title="[flow&amp;occ]">
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/speed&occ.png" class title="[speed&amp;occ]">
<h3 id="2-概率密度分布"><a href="#2-概率密度分布" class="headerlink" title="(2) 概率密度分布"></a>(2) 概率密度分布</h3><p>绘制流率、速度的概率密度分布图和累积概率密度分布图。</p>
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/%E6%B5%81%E9%87%8F%E7%9A%84%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%88%86%E5%B8%83.png" class title="[流量的概率密度分布]">
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/%E9%80%9F%E5%BA%A6%E7%9A%84%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%88%86%E5%B8%83.png" class title="[速度的概率密度分布]">
<h3 id="3-时间序列变化"><a href="#3-时间序列变化" class="headerlink" title="(3) 时间序列变化"></a>(3) 时间序列变化</h3><p>观察流量、重车分布、速度、占有率的时序变化。
以9月1日一天的数据为例：</p>
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/%E4%BA%A4%E9%80%9A%E6%B5%81%E4%B8%80%E5%A4%A9.png" class title="[交通流一天]">
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/%E9%80%9F%E5%BA%A6%E5%8D%A0%E6%9C%89%E7%8E%87%E4%B8%80%E5%A4%A9.png" class title="[速度占有率一天]">
<p>所有四周的流量时间序列变化：</p>
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%B5%81%E9%87%8F.png" class title="[时间序列流量]">

<h2 id="3-LSTM模型构建"><a href="#3-LSTM模型构建" class="headerlink" title="3. LSTM模型构建"></a>3. LSTM模型构建</h2><p>以前三周数据训练，最后一周数据预测。时间步设为12，即前一个小时预测下一个5分钟。
话不多说，直接上代码。</p>
<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> MinMaxScaler
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>sequence <span class="token keyword">import</span> TimeseriesGenerator
<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential
<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> LSTM<span class="token punctuation">,</span> Dense<span class="token punctuation">,</span> Activation
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_absolute_error <span class="token keyword">as</span> mae
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error <span class="token keyword">as</span> mse
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> r2_score
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token comment" spellcheck="true"># 将序列转换为监督学习问题</span>
<span class="token keyword">def</span> <span class="token function">series_to_supervised</span><span class="token punctuation">(</span>datasetX<span class="token punctuation">,</span>datasetY<span class="token punctuation">,</span>lag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x的属性数量'</span><span class="token punctuation">,</span>datasetX<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    data_gen <span class="token operator">=</span> TimeseriesGenerator<span class="token punctuation">(</span>datasetX<span class="token punctuation">,</span>datasetY<span class="token punctuation">,</span> length<span class="token operator">=</span>lag<span class="token punctuation">,</span>
                                   batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># length是滑lag,sampling_rate是timesteps,batch_size是y的维度</span>
    X_out<span class="token punctuation">,</span> Y_out <span class="token operator">=</span> data_gen<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data_gen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        batch <span class="token operator">=</span> data_gen<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        x<span class="token punctuation">,</span> y <span class="token operator">=</span> batch
        X_out <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>X_out<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        Y_out <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>Y_out<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
    X_out <span class="token operator">=</span> np<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>X_out<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    Y_out <span class="token operator">=</span> np<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>Y_out<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'X shape'</span><span class="token punctuation">,</span>X_out<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Y shape'</span><span class="token punctuation">,</span> Y_out<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">return</span> X_out<span class="token punctuation">,</span>Y_out

<span class="token comment" spellcheck="true"># 加载数据集</span>
path<span class="token operator">=</span>'<span class="token punctuation">.</span>\'
olddf<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">'PeMS数据.xlsx'</span><span class="token punctuation">,</span>sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">)</span>
df<span class="token operator">=</span>olddf<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>deep<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">'Flow (Veh/5 Minutes)'</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'Flow (Veh/5 Minutes)'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token number">3</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换为veh/h/ln</span>

<span class="token comment" spellcheck="true">#生成lstmX,Y</span>
input_attributes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Flow (Veh/5 Minutes)'</span><span class="token punctuation">,</span><span class="token string">'Occupancy (%)'</span><span class="token punctuation">,</span><span class="token string">'Speed (mph)'</span><span class="token punctuation">,</span><span class="token string">'Truck Prop (%)'</span><span class="token punctuation">]</span>
datasetX<span class="token operator">=</span>df<span class="token punctuation">[</span>input_attributes<span class="token punctuation">]</span><span class="token punctuation">.</span>values
datasetY<span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'Flow (Veh/5 Minutes)'</span><span class="token punctuation">]</span>
scalerx <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span>feature_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
scalery <span class="token operator">=</span> MinMaxScaler<span class="token punctuation">(</span>feature_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
X_scaled <span class="token operator">=</span> scalerx<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>datasetX<span class="token punctuation">)</span>
Y_scaled<span class="token operator">=</span> scalery<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>datasetY<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
X<span class="token punctuation">,</span>Y<span class="token operator">=</span>series_to_supervised<span class="token punctuation">(</span>X_scaled<span class="token punctuation">,</span>Y_scaled<span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#12个数据点即1小时</span>

<span class="token comment" spellcheck="true">#划分训练集与测试集</span>
X_train<span class="token punctuation">,</span>X_test<span class="token punctuation">,</span>Y_train<span class="token punctuation">,</span>Y_test<span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'X_train shape'</span><span class="token punctuation">,</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'X_test shape'</span><span class="token punctuation">,</span>X_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Y_train shape'</span><span class="token punctuation">,</span>Y_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Y_test shape'</span><span class="token punctuation">,</span>Y_test<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">#构建模型</span>
<span class="token comment" spellcheck="true"># input_dim是输入的train_x的最后一个维度，train_x的维度为(n_samples, time_steps, input_dim)</span>
model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'tanh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'mse'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 拟合神经网络模型</span>
history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> validation_data<span class="token operator">=</span><span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>
                    shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 绘制训练loss数据</span>
fig1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>
ax1 <span class="token operator">=</span> fig1<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'loss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>
ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>history<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">'val_loss'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>
ax1<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Loss'</span><span class="token punctuation">)</span>
ax1<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Epochs'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 做出预测</span>
yhat <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
invY_predict<span class="token operator">=</span>scalery<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>yhat<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
invY_test<span class="token operator">=</span>scalery<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>Y_test<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'lstm结果'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'r_square'</span><span class="token punctuation">,</span> r2_score<span class="token punctuation">(</span>invY_test<span class="token punctuation">,</span>invY_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mae'</span><span class="token punctuation">,</span> mae<span class="token punctuation">(</span>invY_test<span class="token punctuation">,</span>invY_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'rmse'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>mse<span class="token punctuation">(</span>invY_test<span class="token punctuation">,</span>invY_predict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

fig2 <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>
ax2 <span class="token operator">=</span> fig2<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>invY_test<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Ground Truth'</span><span class="token punctuation">)</span>
ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>invY_predict<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'LSTM Prediciton'</span><span class="token punctuation">)</span>
ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Flow (veh/h/ln)'</span><span class="token punctuation">)</span>
ax2<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>
xlabel<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    xlabel<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'9/%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
ax2<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2304</span><span class="token punctuation">,</span><span class="token number">288</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ax2<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>xlabel<span class="token punctuation">,</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#绘制9/28一天的图</span>
fig3 <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>
ax3 <span class="token operator">=</span> fig3<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
ax3<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>invY_test<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">288</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'-'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Ground Truth'</span><span class="token punctuation">)</span>
ax3<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>invY_predict<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">288</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'purple'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'LSTM Prediciton'</span><span class="token punctuation">)</span>
ax3<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Flow (veh/h/ln)'</span><span class="token punctuation">)</span>
ax3<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span>
xlabel<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    xlabel<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'%d:00'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
ax3<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">289</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
ax3<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>xlabel<span class="token punctuation">,</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="结果展示："><a href="#结果展示：" class="headerlink" title="结果展示："></a>结果展示：</h3><p>最后一周所有的预测：</p>
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/%E5%85%A8%E9%83%A8%E9%A2%84%E6%B5%8B.png" class title="[全部预测]">
<p>9月28日结果：</p>
<img src="/2020/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/06/15/%E5%9F%BA%E4%BA%8E%E5%A4%9A%E5%85%83LSTM%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%9F%AD%E6%97%B6%E4%BA%A4%E9%80%9A%E6%B5%81%E9%87%8F%E9%A2%84%E6%B5%8B/9.28%E9%A2%84%E6%B5%8B.png" class title="[9.28预测]">
<p>预测的效果还可以，毕竟只设置了单隐层。</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>交通流</tag>
        <tag>LSTM</tag>
        <tag>神经网络</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>开门之作——小白HTML-CSS-JavaScript入门摸索历程</title>
    <url>/2020/01/28/%E5%BC%80%E9%97%A8%E4%B9%8B%E4%BD%9C%E2%80%94%E2%80%94%E5%B0%8F%E7%99%BDHTML-CSS-JavaScript%E5%85%A5%E9%97%A8%E6%91%B8%E7%B4%A2%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[<p>
我是一个非计算机专业的同学，不过也因为时代发展，专业需要，也会用python写一些小代码。<br>

</p><p>平时呢热爱<strong>摄影、视频制作、还有视觉上好看的事物</strong>。</p>
<p>我想开始学Web Design技术也主要是因为，我喜欢的一个YouTuber他的大学专业也本来是网页设计……<strong>Peter Mckinnon!</strong><br></p>
<p>好了正式开始！</p>
<p></p>

<h2>1. 学习资源</h2>
<strong>地址：</strong><u><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web" target="_blank" rel="noopener"><strong>MDN Web Docs</strong></a><br></u>

<p>这是一个<strong>非常优质</strong>、可以称之为<strong>鼻祖</strong>的<strong>Mozilla</strong>开源社区项目。它其中详细介绍了<strong>Web Design</strong>的各种基础技术知识。好好学，系统性地学，真的会有巨大的收获。
而且大多数内容都有中文版本。</p>
<img src="/2020/01/28/%E5%BC%80%E9%97%A8%E4%B9%8B%E4%BD%9C%E2%80%94%E2%80%94%E5%B0%8F%E7%99%BDHTML-CSS-JavaScript%E5%85%A5%E9%97%A8%E6%91%B8%E7%B4%A2%E5%8E%86%E7%A8%8B/01/28/%E5%BC%80%E9%97%A8%E4%B9%8B%E4%BD%9C%E2%80%94%E2%80%94%E5%B0%8F%E7%99%BDHTML-CSS-JavaScript%E5%85%A5%E9%97%A8%E6%91%B8%E7%B4%A2%E5%8E%86%E7%A8%8B/MDN%E6%88%AA%E5%9B%BE.PNG" class>

<h2>2. 我的入门历程</h2>

<ul>
<li>花1-2天时间阅读、上手操作HTML部分教程：<ul>
<li>了解<code>HTML</code>的结构<code>&lt;head&gt;,&lt;body&gt;,&lt;script&gt;</code>等；</li>
<li>知道文本<code>&lt;p&gt;</code>(<code>&lt;h1&gt;&lt;div&gt;&lt;span&gt;</code>)、列表<code>&lt;ul&gt;&lt;ol&gt;</code>、超链接<code>&lt;a href&gt;</code>、表格<code>&lt;table&gt;</code>、表单<code>&lt;form&gt;</code>的格式、用途；</li>
<li>接触<code>CSS</code>的样式知识；</li>
<li>知道如何选择特定内容<code>querySelector</code>；</li>
<li><strong>表单<code>&lt;form&gt;</code>那里创建对象响应可能有些难，不过没关系，先仿照着学下去</strong>！</li>
</ul>
</li>
<li>花1天时间学习CSS部分教程：<ul>
<li>了解<code>CSS</code>结构；</li>
<li>知道如何选择特定部分，并修改样式；</li>
<li>学习网页排版位置设置知识&nbsp;(<font color="#2e6da4">虽然这里我也没有好好学就跳过了</font>);</li>
</ul>
</li>
<li>花3-4天时间学习JavaScript部分教程:<ul>
<li>变量、函数、循环等编程基础与其他编程语言大同小易，这个基础应该原本就具备；</li>
<li>学会动态操纵文档，<strong><code>DOM</code>树操作</strong>非常重要！</li>
<li>会在浏览器<code>Console控制台</code>调试程序;</li>
<li>控件响应事件学习,<strong>这样静态网页才能动起来</strong>；</li>
<li><strong>其他还有更深层次的前端知识，异步处理，<code>Canvas、OpenGL</code>画图等等我先没有具体去学</strong>，
因为我的初衷是创建一个个人博客，就急于来自己上手尝试了。<strong>在此还是强烈建议有识之士去好好学习的。</strong></li>
</ul>
</li>
</ul>
<h2>3. 心得小结</h2>

<p>虽然我自己也没有完完全全吃透<strong>MDN</strong>官方教程上的内容，但是自己这几天照着官方文档和示例去学习，主要有两大感受：</p>
<ul>
<li><strong>系统性</strong>！这个教程比其他网络上的博客或者一些网站更专业更全面，并且有示例源码可以仿照学习。</li>
<li><strong>开心啊</strong>！终于自己可以看懂之前一些html网页源码内容，对于无论是<strong>爬虫、调用API、Echarts使用</strong>等等都很有帮助。</li>
</ul>
<p>这个教程非常棒，以后遇到很多困惑都可以再回去查，而且发现网络上很多的解决方案的原始链接都是它！快去学习一下鼻祖的<strong>MDN Web Docs</strong>吧！</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>css</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>无需插件ArcGIS自定义加载连接超全WMTS底图服务</title>
    <url>/2022/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>有的时候ArcGIS使用自带的添加底图功能失灵，或者想自己额外添加在线底图，可以使用ArcGIS其自带的WMTS服务功能！</p>
<h1 id="1-打开【catalog-GIS-Servers-Add-WMTS-Server】"><a href="#1-打开【catalog-GIS-Servers-Add-WMTS-Server】" class="headerlink" title="1. 打开【catalog-GIS Servers-Add WMTS Server】"></a>1. 打开【catalog-GIS Servers-Add WMTS Server】</h1><h1 id="2-输入http-xdc-at-map-wmts"><a href="#2-输入http-xdc-at-map-wmts" class="headerlink" title="2. 输入http://xdc.at/map/wmts/"></a>2. 输入<a href="http://xdc.at/map/wmts/" target="_blank" rel="noopener">http://xdc.at/map/wmts/</a></h1><p>这里集成了天地图、高德地图、openstreetmap、谷歌地图等等</p>
<h1 id="3-点【Get-Layers】"><a href="#3-点【Get-Layers】" class="headerlink" title="3. 点【Get Layers】"></a>3. 点【<strong>Get Layers</strong>】</h1><img src="/2022/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/arcgis_wmts1.PNG" class title="[arcgis_wmts1]">

<h1 id="4-双击想要的底图连接wmts服务"><a href="#4-双击想要的底图连接wmts服务" class="headerlink" title="4. 双击想要的底图连接wmts服务"></a>4. 双击想要的底图连接wmts服务</h1><img src="/2022/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/arcgis_wmts3.PNG" class title="[arcgis_wmts3]">

<h1 id="5-把想要的底图拖到【Table-Of-Contents】"><a href="#5-把想要的底图拖到【Table-Of-Contents】" class="headerlink" title="5. 把想要的底图拖到【Table Of Contents】"></a>5. 把想要的底图拖到【Table Of Contents】</h1><img src="/2022/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/arcgis_wmts2.PNG" class title="[arcgis_wmts2]">

<h1 id="额外附一个ArcGIS-Server服务地址"><a href="#额外附一个ArcGIS-Server服务地址" class="headerlink" title="额外附一个ArcGIS Server服务地址"></a>额外附一个ArcGIS Server服务地址</h1><p><a href="https://map.geoq.cn/arcgis/services/" target="_blank" rel="noopener">https://map.geoq.cn/arcgis/services/</a></p>
<img src="/2022/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/01/29/%E6%97%A0%E9%9C%80%E6%8F%92%E4%BB%B6ArcGIS%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A0%E8%BD%BD%E8%BF%9E%E6%8E%A5WMTS%E5%BA%95%E5%9B%BE%E6%9C%8D%E5%8A%A1/arcgis_server1.PNG" class title="[arcgis_server1]">

<p>使用方式同上</p>
<p>打开【catalog-GIS Servers-Add ArcGIS Server】</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>地图API</tag>
        <tag>ArcGIS</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Hexo的历程和一些bug解决方案</title>
    <url>/2020/01/28/%E9%85%8D%E7%BD%AEHexo%E7%9A%84%E5%8E%86%E7%A8%8B%E5%92%8C%E4%B8%80%E4%BA%9Bbug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>这篇主要来讲讲我怎么入手搭建自己的Hexo博客。我主要是按照这篇教程<strong><a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">Hexo+Github博客搭建完全教程</a></strong>来做的，感谢<strong><a href="https://sunhwee.com/" target="_blank" rel="noopener">洪卫</a></strong> ，他已经写的非常详细了。
请大家按照这个教程先做下去！有遇到其他问题可以来看看我的回答，也许能帮到你哦。
我主要会补充一些这篇文章中<font color="#2e6da4">没有提到的问题和解决方案</font>。</p>
<h2 id="1-安装hexo报错bash-hexo-command-not-found"><a href="#1-安装hexo报错bash-hexo-command-not-found" class="headerlink" title="1. 安装hexo报错bash: hexo: command not found"></a>1. 安装hexo报错bash: hexo: command not found</h2><p>在验证<code>npm</code>和<code>node</code>安装正确的情况下,输入<code>npm install -g hexo-cli</code>这条语句后，会经过漫长等待并出现很多<code>error</code>，再输入<code>hexo -v</code>报错<code>bash: hexo: command not found</code>说没有安装成功。这是国内镜像源的问题，使用淘宝镜像安装。
先输入<code>npm config set registry &quot;https://registry.npm.taobao.org&quot;</code>，再输入<code>npm install hexo-cli g</code>。就会加快安装并且成功啦。</p>
<h2 id="2-hexo-init-超级慢"><a href="#2-hexo-init-超级慢" class="headerlink" title="2. hexo init 超级慢"></a>2. hexo init 超级慢</h2><p>使用淘宝镜像初始化，在<code>hexo init MyBlog</code>之前，先输入<code>npm --registry https://registry.npm.taobao.org info underscore</code>，然后再输入<code>hexo init MyBlog</code>，接着就可以照着<strong><a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">洪卫的博客</a></strong>继续做下去啦。</p>
<h2 id="3-ssh-key-配置"><a href="#3-ssh-key-配置" class="headerlink" title="3. ssh-key 配置"></a>3. ssh-key 配置</h2><p>当输入完<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code>之后，系统会让你输入一个文件夹路径来保存<code>id_rsa.pub</code>和<code>id_rsa</code>文件，建议你输入你的博客的完整根目录。
比如我的就是<code>D:\software\web storm project\EvaBlog</code>。
在github上传公钥的时候，就可以找到这个文件<code>id_rsa.pub</code>将内容复制过去。
也许你会收到报错<code>Permission denied (publickey)</code>，很大概率是因为网速，你过一会儿再试一遍<code>ssh -T git@gitee.com</code>，就能看到对你say Hi和告知successfully了！</p>
<h2 id="4-免去每次提交时输入Github用户名和密码的方法"><a href="#4-免去每次提交时输入Github用户名和密码的方法" class="headerlink" title="4. 免去每次提交时输入Github用户名和密码的方法"></a>4. 免去每次提交时输入Github用户名和密码的方法</h2><p>更改<code>_config.yml</code>文件最后<code>deploy</code>属性：</p>
<pre><code>deploy:
  type: git
  repository: git@github.com:你的用户名/你的用户名.github.io.git
  branch: master</code></pre><h2 id="5-用markdown语法-img-png-本地图片显示不出来"><a href="#5-用markdown语法-img-png-本地图片显示不出来" class="headerlink" title="5. 用markdown语法![](/img.png)本地图片显示不出来"></a>5. 用markdown语法<code>![](/img.png)</code>本地图片显示不出来</h2><p>参考链接:<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">hexo官方资源文件夹设置</a>
         <a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">hexo引用本地图片无法显示</a> 
这是hexo的问题。首先我们需要安装一个图片路径转换的插件，这个插件名字是<code>hexo-asset-image</code>。</p>
<ul>
<li>安装：<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li>
<li>更改根目录下的<code>_config.yml</code>文件，修改<code>post_asset_folder: true</code>。</li>
<li>然后参照<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">这篇博文</a>更改<code>/node_modules/hexo-asset-image/index.js</code>下的配置。<br></li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span>
<span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>hexo<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>version<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>version<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>
       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
       <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span>
    <span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

      <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        ignoreWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        xmlMode<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        lowerCaseTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>
            <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex">/http[s]*.*|\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
               <span class="token operator">!</span><span class="token regex">/^\s*\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>
              <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>
              <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>
                srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              src <span class="token operator">=</span> srcArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
              console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:-->"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>然后将所引用的图片放在<code>_posts</code>下与文章同名文件夹下<img src="/2020/01/28/%E9%85%8D%E7%BD%AEHexo%E7%9A%84%E5%8E%86%E7%A8%8B%E5%92%8C%E4%B8%80%E4%BA%9Bbug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/01/28/%E9%85%8D%E7%BD%AEHexo%E7%9A%84%E5%8E%86%E7%A8%8B%E5%92%8C%E4%B8%80%E4%BA%9Bbug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E7%A4%BA%E4%BE%8B%E6%88%AA%E5%9B%BE.PNG" class></li>
<li>用hexo语法，如我的示例引用：<pre><code><font color="white"> {% asset_img 文件路径示例截图.PNG %}</font></code></pre></li>
<li>请注意你的图片命名不要有<strong>空格</strong>，不然也会不显示。</li>
<li>之后你的博客文章引用的图片在主页和归档等子页面都可以正常显示了。</li>
</ul>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
