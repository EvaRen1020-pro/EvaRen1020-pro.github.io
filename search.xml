<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【自然语言处理】Wordcloud词云分析+LDA主题分类</title>
    <url>/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>最近在一门课上，老师分享了一篇关于应用自然语言处理（NLP）模型分析交通领域研究主题分类的论文，我觉得写得很好很有意思。所以，自己也进行一下尝试。<br>主要分为<strong>Wordcloud词云展示</strong>和<strong>Latent Dirichlet Allocation（LDA）模型主题分类</strong>两部分。</p>
<p>参考文献：<a href="https://www.sciencedirect.com/science/article/pii/S0968090X17300207" target="_blank" rel="noopener">Sun, L., &amp; Yin, Y. (2017). Discovering themes and trends in transportation research using topic modeling. Transportation Research Part C: Emerging Technologies, 77, 49-66. doi:10.1016/j.trc.2017.01.013</a></p>
<p>本次分析的是2017年至2020年发表的交通领域关于<strong>“Mobility-as-a-Service(MaaS)”</strong>的30篇论文的摘要部分。</p>
<img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/%E6%96%87%E7%8C%AE%E6%A6%82%E8%A7%88.PNG" class title="[文献展示]">

<h2 id="wordcloud词云展示"><a href="#wordcloud词云展示" class="headerlink" title="wordcloud词云展示"></a>wordcloud词云展示</h2><ol>
<li><p>首先对文本进行预处理：</p>
<ul>
<li>去除标点符号，按空格拆分句子<br><code>mytext=re.sub(r'[.,()]','',mytext).split(' ') #正侧表达式去除标点</code></li>
<li>用NLTK的wordnet模块进行词形还原  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">from</span> <span class="string">nltk.stem import WordNetLemmatizer</span></span><br><span class="line"><span class="attr">wnl</span> = <span class="string">WordNetLemmatizer()</span></span><br><span class="line"><span class="attr">remytext</span> = <span class="string">''</span></span><br><span class="line"><span class="attr">for</span> <span class="string">i in range(len(mytext)):</span></span><br><span class="line">    <span class="meta">mytext[i]</span>=<span class="string">wnl.lemmatize(mytext[i]) #词性还原</span></span><br><span class="line">    <span class="attr">remytext</span>=<span class="string">remytext+' '+mytext[i]</span></span><br><span class="line"><span class="attr">mytext</span>=<span class="string">remytext</span></span><br></pre></td></tr></table></figure>
<strong>注：wordnet包需要另外独自安装，不然会报如下错误：</strong><br><code>Resource wordnet not found. Please use the NLTK Downloader to obtain the resource:</code><img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/wordnet%E7%BC%BA%E5%A4%B1%E6%8A%A5%E9%94%99.PNG" class>
<strong>这里补充wordnet包安装方法：</strong><br>(1) 命令行cmd打开，输入python；<br>(2) 继续输入<code>import nltk</code>和<code>nltk.download()</code>如下图所示：  <img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/wordnet%E4%B8%8B%E8%BD%BDcmd.PNG" class>
(3) 可能会报错远程主机强制关闭了一个连接。<br>  解决办法：(1)连VPN (2)利用别人已经下载到本地的wordnet包,具体参照这篇博客。<a href="https://blog.csdn.net/Charchunchiu/article/details/96436736?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Python NLTK WordNet的在线与手动安装方法</a><br>(4) 正常情况下,弹出如下窗口，选择<code>Corpora/wordnet</code>下载即可。  <img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/wordnet%E4%B8%8B%E8%BD%BD%E7%95%8C%E9%9D%A2.PNG" class></li>
<li>设置停用词<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">from</span> wordcloud import STOPWORDS<span class="comment">#导入原有的停用词包</span></span><br><span class="line">additional_stopwords=[]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(stopwordsfile,<span class="string">'r'</span>,encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> f:</span><br><span class="line">        additional_stopwords.append(<span class="built_in">line</span>.<span class="built_in">replace</span>(<span class="string">"\n"</span>,<span class="string">""</span>))</span><br><span class="line">stop_words = additional_stopwords + list(STOPWORDS)<span class="comment">#额外添加自己的停用词</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>应用wordcloud包</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">from wordcloud import WordCloud</span><br><span class="line">wordcloud = <span class="constructor">WordCloud(<span class="params">stopwords</span>=<span class="params">stop_words</span>,<span class="params">background_color</span>='<span class="params">white</span>',<span class="params">collocations</span>=True,<span class="params">colormap</span>='<span class="params">viridis</span>',<span class="params">width</span>=2160,<span class="params">height</span>=1080,<span class="params">max_words</span>=50,<span class="params">prefer_horizontal</span>=1)</span>.generate(mytext)</span><br><span class="line">plt.imshow(wordcloud, interpolation='bilinear')</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show<span class="literal">()</span></span><br></pre></td></tr></table></figure> 
<img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/maas%E8%AF%8D%E4%BA%91%E7%BB%93%E6%9E%9C.PNG" class title="[词云展示]">

</li>
</ol>
<h2 id="LDA主题分类"><a href="#LDA主题分类" class="headerlink" title="LDA主题分类"></a>LDA主题分类</h2><p>这里使用<strong>sklearn</strong>的<strong>LDA</strong>包。<br>基于之前的<strong>文本预处理</strong>，还需要转换为<strong>词向量</strong>的形式，才可放入LDA模型训练。<br>具体代码如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text import CountVectorizer #词向量转换模块</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition import LatentDirichletAllocation as LDA</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import time</span><br><span class="line"><span class="keyword">from</span> matplotlib.pyplot import MultipleLocator</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialise the count vectorizer with the English stop words</span></span><br><span class="line">count_vectorizer = CountVectorizer(<span class="attribute">stop_words</span>=stop_words)#这里也可以设置停用词</span><br><span class="line"><span class="comment"># Fit and transform the processed titles</span></span><br><span class="line">count_data = count_vectorizer.fit_transform(mytext)</span><br><span class="line"></span><br><span class="line">def print_topics(model, count_vectorizer, n_top_words):</span><br><span class="line">    words = count_vectorizer.get_feature_names()</span><br><span class="line">    <span class="keyword">for</span> topic_idx, topic <span class="keyword">in</span> enumerate(model.components_):</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">"\nTopic #%d:"</span> % topic_idx)</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">" "</span>.join([words[i]</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> topic.argsort()[:-n_top_words - 1:-1]]))</span><br><span class="line">n_topics = range(3,7,1)</span><br><span class="line">perplexityLst = [1.0]*len(n_topics)</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练LDA并打印训练时间</span></span><br><span class="line">lda_models = []</span><br><span class="line"><span class="keyword">for</span> idx, n_topic <span class="keyword">in</span> enumerate(n_topics):</span><br><span class="line">    <span class="builtin-name">print</span>(idx,n_topic)</span><br><span class="line">    lda = LDA(<span class="attribute">n_components</span>=n_topic, <span class="attribute">max_iter</span>=2000,learning_method='batch',</span><br><span class="line"><span class="comment">#                                    perp_tol=0.1, #default</span></span><br><span class="line"><span class="comment">#                                    doc_topic_prior=1/n_topic, #default</span></span><br><span class="line"><span class="comment">#                                    topic_word_prior=1/n_topic, #default</span></span><br><span class="line">                                    <span class="attribute">verbose</span>=0)</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    lda.fit(count_data)</span><br><span class="line">    perplexityLst[idx] = lda.perplexity(count_data)</span><br><span class="line">    lda_models.append(lda)</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"# of Topic: %d, "</span> % n_topics[idx])</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"done in %0.3fs, N_iter %d, "</span> % ((time.time() - t0), lda.n_iter_))</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">"Perplexity Score %0.3f"</span> % perplexityLst[idx])</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印最佳模型</span></span><br><span class="line"><span class="attribute">number_words</span>=10</span><br><span class="line">best_index = perplexityLst.index(min(perplexityLst))</span><br><span class="line">best_n_topic = n_topics[best_index]</span><br><span class="line">best_model = lda_models[best_index]</span><br><span class="line"><span class="builtin-name">print</span> (<span class="string">"Best # of Topic: "</span>, best_n_topic)</span><br><span class="line">print_topics(best_model, count_vectorizer, number_words)</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制不同主题数perplexity的不同</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(1,1,1)</span><br><span class="line">xaxis=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(n_topics)):</span><br><span class="line">    xaxis.append(n_topics[i])</span><br><span class="line">ax.plot(xaxis, perplexityLst)</span><br><span class="line"><span class="attribute">x_major_locator</span>=MultipleLocator(1)</span><br><span class="line">ax.set_xlabel(<span class="string">"number of topics"</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">"Approximate Perplexity"</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure> 

<p>最终我这里选择了分为3个主题。虽然2个的perplexity效果好一些，但我根据需要选择了3个。</p>
<img src="/2020/04/02/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91Wordcloud%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90+LDA%E4%B8%BB%E9%A2%98%E5%88%86%E7%B1%BB/perplexity%E6%8C%87%E6%95%B0.PNG" class title="[perplexity指数]">

<p>Topic #1: 城市系统角度<br>model city public business alliance actor efficiency factor system new<br>Topic #2: 各出行模式运营商角度<br>user time market adoption road potential intermediary car operator public<br>Topic #3: 用户出行模式选择角度<br>car public model mode bundle sharing new travel choice demand</p>
<p>好了，这次就到这里了。具体的参数设置还是参照官方文档。</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>Wordcloud</tag>
        <tag>LDA</tag>
      </tags>
  </entry>
  <entry>
    <title>使用高德开放平台API获取POI位置和路线信息</title>
    <url>/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>借助地图API接口，帮助我们快速获取大量的静态、动态数据是非常有效的。<br>这次我就来讲讲怎么利用高德开发平台API接口，获取一些设施位置和路径规划信息。</p>
<h2 id="高德开放平台"><a href="#高德开放平台" class="headerlink" title="高德开放平台"></a>高德开放平台</h2><p><a href="https://lbs.amap.com/api/webservice/summary" target="_blank" rel="noopener">高德开放平台</a>可以让你自己开发的应用嵌入高德服务，使用高德在地理信息服务上的贡献。<br>因为这次我主要需要用到的是一些信息搜索，所以用的是<code>开发支持->Web服务->Web服务API</code>，其他需要移动应用开发的可以去查询<strong>开发支持</strong>下的<strong>Web端、Andriod平台、IOS平台、微信小程序</strong>等等。</p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/web_API_intro.PNG" class>
<p>如平台的简介，它可以帮你实现搜索、路径规划、行驶距离测量等功能。</p>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>申请一个高德的适用于Web服务的<code>key</code>，之后在<code>URL</code>里需要填上自己的<code>key</code>。注意个人用户每日每个key的使用次数是有限额的，超限了查询信息返回会报错，但一个人可以申请好多个。</p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/key.PNG" class>

<h3 id="2-根据需要填充URL关键字"><a href="#2-根据需要填充URL关键字" class="headerlink" title="2. 根据需要填充URL关键字"></a>2. 根据需要填充URL关键字</h3><p>我们这次用<code>关键字搜索</code>功能，来查询POI(point of interest)信息，以查询某一城市的机场、火车站的枢纽地理信息为例。<br>根据开发文档提供的URL示例:<code><a href="https://restapi.amap.com/v3/place/text?parameters" target="_blank" rel="noopener">https://restapi.amap.com/v3/place/text?parameters</a></code><br>我们把<code>parameters</code>替换为搜索时限定的一些关键词，并且用<code>&</code>连接不同的条件，记得替换你自己申请的key。<br>比如：<code><a href="https://restapi.amap.com/v3/place/text?keywords=火车站&amp;city=北京&amp;citylimit=true&amp;extensions=all&amp;key=你申请的key&amp;offset=20&amp;page=1" target="_blank" rel="noopener">https://restapi.amap.com/v3/place/text?keywords=火车站&amp;city=北京&amp;citylimit=true&amp;extensions=all&amp;key=你申请的key&amp;offset=20&amp;page=1</a></code></p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/keywords_search.PNG" class>

<p>返回的结果，也是参照开发文档，注意弄清层级结构，即可获取对应信息，默认返回<code>json</code>格式。</p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/result_parameter.PNG" class>

<p>我这里会主要想要获取经纬度信息，在<code>['pois']->['poi']->['location']</code>下面。</p>
<h3 id="3-使用python批量访问获取结果"><a href="#3-使用python批量访问获取结果" class="headerlink" title="3. 使用python批量访问获取结果"></a>3. 使用python批量访问获取结果</h3><p>用python的<code>requests</code>库，获取访问结果，完整代码如下。这里用简单的<code>GET</code>方式填充URL的参数即可，以后自己爬其他的信息还有可能要用到<code>POST</code>方式，但以字典方式传送参数也是一样的。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import math</span><br><span class="line">import json</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">def get_station(city,type):  # 抓取场站信息</span><br><span class="line">    url1 = <span class="string">"https://restapi.amap.com/v3/place/text?keywords=%s&amp;city=%s&amp;citylimit=true&amp;extensions=all&amp;key=你自己申请的key&amp;offset=20&amp;page=%d"</span>%(type,city,1)#查询机场和火车站的经纬度信息</span><br><span class="line">    req = requests.<span class="builtin-name">get</span>(url1)  # 请求高德地图Place API返回数据</span><br><span class="line">    content = req.content</span><br><span class="line">    data = json.loads(content)  # 将获取的信息封装为字典</span><br><span class="line">    <span class="attribute">num</span>=int(data[<span class="string">'count'</span>])  # 提取场站总数</span><br><span class="line">    result = data[<span class="string">'pois'</span>]  # 提取字典中的有效信息</span><br><span class="line">    <span class="builtin-name">print</span>(num)</span><br><span class="line"></span><br><span class="line">    infoDf = pd.DataFrame(columns=[<span class="string">'名称'</span>, <span class="string">'经度'</span>, <span class="string">'纬度'</span>, <span class="string">'城市'</span>, <span class="string">'类型'</span>, <span class="string">'别名'</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="attribute">num</span>==0:#返回有数据的情况下</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">'%s无%s'</span>%(city,type))</span><br><span class="line"></span><br><span class="line">    #第一次的信息别浪费了</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">        <span class="builtin-name">print</span>(i)</span><br><span class="line">        str_temp = result[i]  # 保存总数到链表第一个元素</span><br><span class="line">        <span class="keyword">if</span> len(str_temp[<span class="string">'alias'</span>]) == 0:</span><br><span class="line">            alias = <span class="string">''</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            alias = str_temp[<span class="string">'alias'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="builtin-name">print</span>(str_temp[<span class="string">'name'</span>],str_temp[<span class="string">'location'</span>].split(<span class="string">','</span>)[0],str_temp[<span class="string">'location'</span>].split(<span class="string">','</span>)[1],str_temp[<span class="string">'cityname'</span>],alias)</span><br><span class="line">        singleinfo=&#123;<span class="string">'名称'</span>:str_temp[<span class="string">'name'</span>],<span class="string">'经度'</span>:str_temp[<span class="string">'location'</span>].split(<span class="string">','</span>)[0],<span class="string">'纬度'</span>:str_temp[<span class="string">'location'</span>].split(<span class="string">','</span>)[1],<span class="string">'城市'</span>:str_temp[<span class="string">'cityname'</span>],<span class="string">'类型'</span>:type,<span class="string">'别名'</span>:alias&#125;</span><br><span class="line">        <span class="attribute">singleinfoDf</span>=pd.DataFrame(singleinfo,columns=[<span class="string">'名称'</span>, <span class="string">'经度'</span>, <span class="string">'纬度'</span>, <span class="string">'城市'</span>,<span class="string">'类型'</span>,<span class="string">'别名'</span>],index = [0])</span><br><span class="line">        infoDf = pd.concat([infoDf, singleinfoDf], <span class="attribute">axis</span>=0, <span class="attribute">ignore_index</span>=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="attribute">totalpage</span>=math.ceil(num/20)#每一页显示20条数据，算好页数</span><br><span class="line">    <span class="keyword">if</span> totalpage &gt;1 :</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(2,totalpage+1):#从第2页起</span><br><span class="line">            url2 = <span class="string">"https://restapi.amap.com/v3/place/text?keywords=%s&amp;city=%s&amp;citylimit=true&amp;extensions=all&amp;key=e3bc4d79724c51578f54e141d4085394&amp;offset=20&amp;page=%d"</span>%(type,city,n)#查询机场和火车站的经纬度信息</span><br><span class="line">            req = requests.<span class="builtin-name">get</span>(url2)  # 请求高德地图Place API返回数据</span><br><span class="line">            content = req.content</span><br><span class="line">            data = json.loads(content)  # 将获取的信息封装为字典</span><br><span class="line">            result = data[<span class="string">'pois'</span>]  # 提取字典中的有效信息</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">                <span class="builtin-name">print</span>(i)</span><br><span class="line">                str_temp = result[i]  # 保存总数到链表第一个元素</span><br><span class="line">                <span class="keyword">if</span> len(str_temp[<span class="string">'alias'</span>])==0:</span><br><span class="line">                    <span class="attribute">alias</span>=<span class="string">''</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="attribute">alias</span>=str_temp[<span class="string">'alias'</span>]</span><br><span class="line">                singleinfo = &#123;<span class="string">'名称'</span>: str_temp[<span class="string">'name'</span>], <span class="string">'经度'</span>: str_temp[<span class="string">'location'</span>].split(<span class="string">','</span>)[0],</span><br><span class="line">                              <span class="string">'纬度'</span>: str_temp[<span class="string">'location'</span>].split(<span class="string">','</span>)[1], <span class="string">'城市'</span>: str_temp[<span class="string">'cityname'</span>],<span class="string">'类型'</span>:type, <span class="string">'别名'</span>: alias&#125;</span><br><span class="line">                singleinfoDf = pd.DataFrame(singleinfo,columns=[<span class="string">'名称'</span>, <span class="string">'经度'</span>, <span class="string">'纬度'</span>, <span class="string">'城市'</span>,<span class="string">'类型'</span>,<span class="string">'别名'</span>],index = [0])</span><br><span class="line">                infoDf = pd.concat([infoDf,singleinfoDf],<span class="attribute">axis</span>=0,ignore_index=True)</span><br><span class="line"></span><br><span class="line">    return infoDf</span><br><span class="line"></span><br><span class="line">def <span class="builtin-name">run</span>():  # 开始抓取文件</span><br><span class="line">    citylist=[<span class="string">'石家庄'</span>,<span class="string">'唐山'</span>,<span class="string">'邯郸'</span>,<span class="string">'保定'</span>,<span class="string">'沧州'</span>,<span class="string">'邢台'</span>,<span class="string">'廊坊'</span>,<span class="string">'承德'</span>,<span class="string">'张家口'</span>,<span class="string">'衡水'</span>,<span class="string">'秦皇岛'</span>]#,<span class="string">'张家口'</span>,<span class="string">'衡水'</span>,<span class="string">'秦皇岛'</span></span><br><span class="line">    typelist=[<span class="string">'机场'</span>,<span class="string">'火车站'</span>]</span><br><span class="line">    whole_info = pd.DataFrame(columns=[<span class="string">'名称'</span>, <span class="string">'经度'</span>, <span class="string">'纬度'</span>, <span class="string">'城市'</span>,<span class="string">'类型'</span>,<span class="string">'别名'</span>])</span><br><span class="line">    <span class="keyword">for</span> cityname <span class="keyword">in</span> citylist:</span><br><span class="line">        <span class="keyword">for</span><span class="built_in"> type </span><span class="keyword">in</span> typelist:</span><br><span class="line">            <span class="builtin-name">info</span> = get_station(cityname,type)</span><br><span class="line">            whole_info=  pd.concat([whole_info,<span class="builtin-name">info</span>],<span class="attribute">axis</span>=0,ignore_index=True)</span><br><span class="line"></span><br><span class="line">    whole_info.to_csv(<span class="string">'/京津冀机场火车站信息.csv'</span>,<span class="attribute">index</span>=<span class="literal">False</span>,encoding='utf_8_sig')</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="builtin-name">run</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>类似地，大家可以参照以上代码，去查询一下餐厅、公交站等其他设施的信息。</strong></p>
<h3 id="获取路径规划信息"><a href="#获取路径规划信息" class="headerlink" title="*获取路径规划信息"></a>*获取路径规划信息</h3><p>刚才是介绍如何用<code>关键字搜索</code>功能，进行一些POI点的信息查询。现在做一些稍微复杂一点点的更深入的查询。<br>查询两个点之间的不同交通方式的路径规划信息，比如<strong>驾车路线、耗时、距离，公交的路线、耗时、花费</strong>等。<br>此时查询<a href="https://lbs.amap.com/api/webservice/guide/api/direction" target="_blank" rel="noopener">路径规划</a>的对应开发文档。</p>
<img src="/2020/02/22/%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0API%E8%8E%B7%E5%8F%96POI%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%B7%AF%E7%BA%BF%E4%BF%A1%E6%81%AF/route_planning.PNG" class>

<ul>
<li><p>驾车路径规划<br>同理，弄清URL需要填充的参数。<br><code><a href="https://restapi.amap.com/v3/direction/driving?parameters" target="_blank" rel="noopener">https://restapi.amap.com/v3/direction/driving?parameters</a></code><br>我的示例:<code><a href="https://restapi.amap.com/v3/direction/driving?origin=116.603039,40.080525&amp;destination=116.427694,39.902779&amp;strategy=10&amp;output=json&amp;extensions=all&amp;key=你申请的key" target="_blank" rel="noopener">https://restapi.amap.com/v3/direction/driving?origin=116.603039,40.080525&amp;destination=116.427694,39.902779&amp;strategy=10&amp;output=json&amp;extensions=all&amp;key=你申请的key</a></code><br>我这里就是用刚才查询到的北京首都国际机场的经纬度和北京站的经纬度，查询其之间的驾车路径策略。<br>然后可以请求访问<code>URL</code>，获取很多有用的信息，驾车路线、耗时、距离，乃至具体的导航方案、道路的红绿灯情况等等。</p>
</li>
<li><p>公交路径规划<br><code><a href="https://restapi.amap.com/v3/direction/transit/integrated?parameters" target="_blank" rel="noopener">https://restapi.amap.com/v3/direction/transit/integrated?parameters</a></code><br>我的示例:<code><a href="https://restapi.amap.com/v3/direction/transit/integrated?origin=116.603039,40.080525&amp;destination=116.427694,39.902779&amp;city=北京&amp;strategy=0&amp;output=json&amp;extensions=all&amp;key=你申请的key" target="_blank" rel="noopener">https://restapi.amap.com/v3/direction/transit/integrated?origin=116.603039,40.080525&amp;destination=116.427694,39.902779&amp;city=北京&amp;strategy=0&amp;output=json&amp;extensions=all&amp;key=你申请的key</a></code><br>相似地查询公交策略，这里你可以选择根据不同策略，返回不同地路线，比如换乘最少、耗时最短等等。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>高德开发平台API会在查询一些信息时，起到很大帮助（百度开放平台API也是有相似的功能）。重点要去研读一下他们提供的<strong>开发文档</strong>，并且知道<code>URL</code>的组成，这样你就可以个性化的获取你想要的信息了。</li>
<li>更多的内容，还是需要自己去不断发掘。</li>
</ul>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>API</tag>
        <tag>地理信息</tag>
      </tags>
  </entry>
  <entry>
    <title>下载Bing搜索界面每日高清美图方法</title>
    <url>/2020/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Bing搜索的每日一图真的很好看，该如何下载呢？"><a href="#Bing搜索的每日一图真的很好看，该如何下载呢？" class="headerlink" title="Bing搜索的每日一图真的很好看，该如何下载呢？"></a><a href="https://cn.bing.com/" target="_blank" rel="noopener">Bing搜索</a>的每日一图真的很好看，该如何下载呢？</h3><ul>
<li><p>进入Bing搜索主页</p>
<img src="/2020/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/Bing%E9%A6%96%E9%A1%B5.PNG" class>
</li>
<li><p>按<code>F12</code>打开控制台。<br>在<code>Elements</code>下的<code>head</code>中找到图片链接地址。</p>
<img src="/2020/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/head%E9%93%BE%E6%8E%A5.PNG" class>
<p>复制粘贴到浏览器打开，右键图片另存为即可下载<code>1920*1080</code>分辨率无水印的图。<br>如果想下载更高清的<code>UHD</code>大图，将链接两处<code>1920*1080</code>的部分改为<code>UHD</code>即可。</p>
</li>
<li><p>如果想下载前几天的图。<br>点<code>Network</code>,按<code>Ctrl+R</code>刷新页面，再点首页右下角的向左的箭头，前面图片的链接就会显示出来。<br>同理复制链接粘贴打开下载。</p>
<img src="/2020/02/02/%E4%B8%8B%E8%BD%BDBing%E6%90%9C%E7%B4%A2%E7%95%8C%E9%9D%A2%E6%AF%8F%E6%97%A5%E9%AB%98%E6%B8%85%E7%BE%8E%E5%9B%BE%E6%96%B9%E6%B3%95/%E5%89%8D%E9%9D%A2%E9%93%BE%E6%8E%A5.PNG" class>
</li>
<li><p><strong>最后还是要注意，图片有版权，不能商业使用。</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>视觉和摄影</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>美图</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Hexo的历程和一些bug解决方案</title>
    <url>/2020/01/28/%E9%85%8D%E7%BD%AEHexo%E7%9A%84%E5%8E%86%E7%A8%8B%E5%92%8C%E4%B8%80%E4%BA%9Bbug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>这篇主要来讲讲我怎么入手搭建自己的Hexo博客。我主要是按照这篇教程<strong><a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">Hexo+Github博客搭建完全教程</a></strong>来做的，感谢<strong><a href="https://sunhwee.com/" target="_blank" rel="noopener">洪卫</a></strong> ，他已经写的非常详细了。<br>请大家按照这个教程先做下去！有遇到其他问题可以来看看我的回答，也许能帮到你哦。<br>我主要会补充一些这篇文章中<font color="#2e6da4">没有提到的问题和解决方案</font>。</p>
<h2 id="1-安装hexo报错bash-hexo-command-not-found"><a href="#1-安装hexo报错bash-hexo-command-not-found" class="headerlink" title="1. 安装hexo报错bash: hexo: command not found"></a>1. 安装hexo报错bash: hexo: command not found</h2><p>在验证<code>npm</code>和<code>node</code>安装正确的情况下,输入<code>npm install -g hexo-cli</code>这条语句后，会经过漫长等待并出现很多<code>error</code>，再输入<code>hexo -v</code>报错<code>bash: hexo: command not found</code>说没有安装成功。这是国内镜像源的问题，使用淘宝镜像安装。<br>先输入<code>npm config set registry &quot;https://registry.npm.taobao.org&quot;</code>，再输入<code>npm install hexo-cli g</code>。就会加快安装并且成功啦。</p>
<h2 id="2-hexo-init-超级慢"><a href="#2-hexo-init-超级慢" class="headerlink" title="2. hexo init 超级慢"></a>2. hexo init 超级慢</h2><p>使用淘宝镜像初始化，在<code>hexo init MyBlog</code>之前，先输入<code>npm --registry https://registry.npm.taobao.org info underscore</code>，然后再输入<code>hexo init MyBlog</code>，接着就可以照着<strong><a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">洪卫的博客</a></strong>继续做下去啦。</p>
<h2 id="3-ssh-key-配置"><a href="#3-ssh-key-配置" class="headerlink" title="3. ssh-key 配置"></a>3. ssh-key 配置</h2><p>当输入完<code>ssh-keygen -t rsa -C &quot;youremail&quot;</code>之后，系统会让你输入一个文件夹路径来保存<code>id_rsa.pub</code>和<code>id_rsa</code>文件，建议你输入你的博客的完整根目录。<br>比如我的就是<code>D:\software\web storm project\EvaBlog</code>。<br>在github上传公钥的时候，就可以找到这个文件<code>id_rsa.pub</code>将内容复制过去。<br>也许你会收到报错<code>Permission denied (publickey)</code>，很大概率是因为网速，你过一会儿再试一遍<code>ssh -T git@gitee.com</code>，就能看到对你say Hi和告知successfully了！</p>
<h2 id="4-用markdown语法-img-png-本地图片显示不出来"><a href="#4-用markdown语法-img-png-本地图片显示不出来" class="headerlink" title="4. 用markdown语法![](/img.png)本地图片显示不出来"></a>4. 用markdown语法<code>![](/img.png)</code>本地图片显示不出来</h2><p>参考链接:<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">hexo官方资源文件夹设置</a><br>         <a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">hexo引用本地图片无法显示</a><br>这是hexo的问题。首先我们需要安装一个图片路径转换的插件，这个插件名字是<code>hexo-asset-image</code>。</p>
<ul>
<li>安装：<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li>
<li>更改根目录下的<code>_config.yml</code>文件，修改<code>post_asset_folder: true</code>。</li>
<li>然后参照<a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">这篇博文</a>更改<code>/node_modules/hexo-asset-image/index.js</code>下的配置。<br></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">			  $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>然后将所引用的图片放在<code>_posts</code>下与文章同名文件夹下<img src="/2020/01/28/%E9%85%8D%E7%BD%AEHexo%E7%9A%84%E5%8E%86%E7%A8%8B%E5%92%8C%E4%B8%80%E4%BA%9Bbug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E7%A4%BA%E4%BE%8B%E6%88%AA%E5%9B%BE.PNG" class></li>
<li>用hexo语法，如我的示例引用：<pre><code><font color="white"> {% asset_img 文件路径示例截图.PNG %}</font></code></pre></li>
<li>请注意你的图片命名不要有<strong>空格</strong>，不然也会不显示。</li>
<li>之后你的博客文章引用的图片在主页和归档等子页面都可以正常显示了。</li>
</ul>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>开门之作——小白HTML-CSS-JavaScript入门摸索历程</title>
    <url>/2020/01/28/%E5%BC%80%E9%97%A8%E4%B9%8B%E4%BD%9C%E2%80%94%E2%80%94%E5%B0%8F%E7%99%BDHTML-CSS-JavaScript%E5%85%A5%E9%97%A8%E6%91%B8%E7%B4%A2%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[<p>
我是一个非计算机专业的同学，不过也因为时代发展，专业需要，也会用python写一些小代码。<br>

</p><p>平时呢热爱<strong>摄影、视频制作、还有视觉上好看的事物</strong>。</p>
<p>我想开始学Web Design技术也主要是因为，我喜欢的一个YouTuber他的大学专业也本来是网页设计……<strong>Peter Mckinnon!</strong><br></p>
<p>好了正式开始！</p>
<p></p>

<h2>1. 学习资源</h2>
<strong>地址：</strong><u><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web" target="_blank" rel="noopener"><strong>MDN Web Docs</strong></a><br></u>

<p>这是一个<strong>非常优质</strong>、可以称之为<strong>鼻祖</strong>的<strong>Mozilla</strong>开源社区项目。它其中详细介绍了<strong>Web Design</strong>的各种基础技术知识。好好学，系统性地学，真的会有巨大的收获。<br>而且大多数内容都有中文版本。</p>
<img src="/2020/01/28/%E5%BC%80%E9%97%A8%E4%B9%8B%E4%BD%9C%E2%80%94%E2%80%94%E5%B0%8F%E7%99%BDHTML-CSS-JavaScript%E5%85%A5%E9%97%A8%E6%91%B8%E7%B4%A2%E5%8E%86%E7%A8%8B/MDN%E6%88%AA%E5%9B%BE.PNG" class>

<h2>2. 我的入门历程</h2>

<ul>
<li>花1-2天时间阅读、上手操作HTML部分教程：<ul>
<li>了解<code>HTML</code>的结构<code>&lt;head&gt;,&lt;body&gt;,&lt;script&gt;</code>等；</li>
<li>知道文本<code>&lt;p&gt;</code>(<code>&lt;h1&gt;&lt;div&gt;&lt;span&gt;</code>)、列表<code>&lt;ul&gt;&lt;ol&gt;</code>、超链接<code>&lt;a href&gt;</code>、表格<code>&lt;table&gt;</code>、表单<code>&lt;form&gt;</code>的格式、用途；</li>
<li>接触<code>CSS</code>的样式知识；</li>
<li>知道如何选择特定内容<code>querySelector</code>；</li>
<li><strong>表单<code>&lt;form&gt;</code>那里创建对象响应可能有些难，不过没关系，先仿照着学下去</strong>！</li>
</ul>
</li>
<li>花1天时间学习CSS部分教程：<ul>
<li>了解<code>CSS</code>结构；</li>
<li>知道如何选择特定部分，并修改样式；</li>
<li>学习网页排版位置设置知识&nbsp;(<font color="#2e6da4">虽然这里我也没有好好学就跳过了</font>);</li>
</ul>
</li>
<li>花3-4天时间学习JavaScript部分教程:<ul>
<li>变量、函数、循环等编程基础与其他编程语言大同小易，这个基础应该原本就具备；</li>
<li>学会动态操纵文档，<strong><code>DOM</code>树操作</strong>非常重要！</li>
<li>会在浏览器<code>Console控制台</code>调试程序;</li>
<li>控件响应事件学习,<strong>这样静态网页才能动起来</strong>；</li>
<li><strong>其他还有更深层次的前端知识，异步处理，<code>Canvas、OpenGL</code>画图等等我先没有具体去学</strong>，<br>因为我的初衷是创建一个个人博客，就急于来自己上手尝试了。<strong>在此还是强烈建议有识之士去好好学习的。</strong></li>
</ul>
</li>
</ul>
<h2>3. 心得小结</h2>

<p>虽然我自己也没有完完全全吃透<strong>MDN</strong>官方教程上的内容，但是自己这几天照着官方文档和示例去学习，主要有两大感受：</p>
<ul>
<li><strong>系统性</strong>！这个教程比其他网络上的博客或者一些网站更专业更全面，并且有示例源码可以仿照学习。</li>
<li><strong>开心啊</strong>！终于自己可以看懂之前一些html网页源码内容，对于无论是<strong>爬虫、调用API、Echarts使用</strong>等等都很有帮助。</li>
</ul>
<p>这个教程非常棒，以后遇到很多困惑都可以再回去查，而且发现网络上很多的解决方案的原始链接都是它！快去学习一下鼻祖的<strong>MDN Web Docs</strong>吧！</p>
]]></content>
      <categories>
        <category>软件和编程</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>css</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
